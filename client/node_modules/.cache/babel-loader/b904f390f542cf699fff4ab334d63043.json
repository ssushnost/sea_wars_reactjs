{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\client\\\\src\\\\components\\\\AllyGrid.js\";\nimport React from \"react\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst grid = [];\n\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst neighborsMoves = [[0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1]];\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => shipsObjRefCurrent.style.borderColor = \"blue\", 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(row => JSON.stringify(row) === JSON.stringify(searchArray));\n}\n\nexport default function AllyGrid(props) {\n  const gridSize = props.gridSize;\n\n  function generateShipDivs() {\n    const shipDivs = [];\n\n    for (const ship in ships) {\n      shipDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ships[ship].reference,\n        draggable: true,\n        onDragEnd: e => ships[ship].reference.current.style.display = \"inline\",\n        onDragStart: e => {\n          setTimeout(() => ships[ship].reference.current.style.display = \"none\");\n          currentShipRef.current = ship;\n          const diffX = e.clientX - ships[ship].position.x;\n          const diffY = e.clientY - ships[ship].position.y;\n          grabXRef.current = parseInt(diffX / gridSize);\n          grabYRef.current = parseInt(diffY / gridSize);\n        },\n        onMouseUp: e => setTimeout(handleMouseClick, 0, e, ship),\n        onContextMenu: e => e.preventDefault(),\n        style: {\n          position: \"absolute\",\n          left: ships[ship].position.x,\n          top: ships[ship].position.y,\n          width: (() => {\n            switch (ships[ship].orientation) {\n              case \"horizontal\":\n                return `${gridSize * ships[ship].size - 4}px`;\n\n              case \"vertical\":\n                return gridSize - 4;\n\n              default:\n                return \"100px\";\n            }\n          })(),\n          height: (() => {\n            switch (ships[ship].orientation) {\n              case \"horizontal\":\n                return gridSize - 4;\n\n              case \"vertical\":\n                return `${gridSize * ships[ship].size - 4}px`;\n\n              default:\n                return \"100px\";\n            }\n          })(),\n          border: \"solid 2px blue\",\n          cursor: \"grab\"\n        }\n      }, ship, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this));\n    }\n\n    return shipDivs;\n  }\n\n  function generateGridDivs() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spot\",\n          style: {\n            backgroundColor: \"white\",\n            height: `${gridSize - 2}px`,\n            width: `${gridSize - 2}px`,\n            border: \"solid 1px black\"\n          },\n          onDragStart: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n          },\n          onDragOver: e => {\n            e.preventDefault();\n            return false;\n          },\n          onDrop: e => handleDrop(e, i, j)\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this));\n      });\n    });\n    return gridDivs;\n  }\n\n  function handleMouseClick(e, shipName) {\n    if (e.button !== 2) return;\n    const shipObj = ships[shipName];\n    console.dir(shipObj);\n    const shipMap = shipObj.map;\n    const shipObjRefCurrent = shipObj.reference.current;\n    let shipsCopy = Object.assign({}, ships);\n\n    if (shipObj.isPlaced) {\n      var row = shipMap[0][0];\n      var col = shipMap[0][1];\n\n      switch (shipObj.orientation) {\n        case \"vertical\":\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        case \"horizontal\":\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        default:\n          console.warn(\"wrong ship orientation in start rmb handler\");\n      }\n    }\n\n    let allNeighborsExceptCurrentShip = [];\n\n    for (const ship in ships) {\n      if (ship !== shipName) {\n        ships[ship].neighbors.forEach(neighborPair => allNeighborsExceptCurrentShip.push(neighborPair));\n      }\n    }\n\n    let newMap = [];\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row + i, col])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row + i, col]);\n        }\n\n        shipsCopy[shipName].orientation = \"vertical\";\n        break;\n\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row, col + i])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row, col + i]);\n        }\n\n        shipsCopy[shipName].orientation = \"horizontal\";\n        break;\n\n      default:\n        console.warn(\"wrong ship orientation in rmb\");\n    }\n\n    shipsCopy[shipName].map = newMap;\n    let newNeighbors = [];\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[shipName].neighbors = newNeighbors;\n    setShips(shipsCopy);\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle misplace check\");\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle, newMap loop\");\n    }\n\n    shipsCopy[currentShipName].map = newMap; // calculate new neighbors\n\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AllyGrid\",\n      style: {\n        display: \"grid\",\n        width: `${gridSize * 10}px`,\n        gridTemplateColumns: `repeat(10,${gridSize}px)`,\n        gridTemplateRows: `repeat(10,${gridSize}px)`\n      },\n      children: generateGridDivs()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), generateShipDivs(), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: \"absolute\",\n        right: 0\n      },\n      onClick: () => {\n        for (const shipName in ships) {\n          if (!ships[shipName].isPlaced) {\n            console.log(\"not all ships placed\");\n            return;\n          }\n        }\n\n        console.log(\"field is ready for game!\");\n      },\n      children: \"Ready\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = AllyGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllyGrid\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/client/src/components/AllyGrid.js"],"names":["React","grid","i","push","Array","from","neighborsMoves","errorHandle","shipsObjRefCurrent","style","borderColor","setTimeout","multidimensionalIncludes","multidimensionalArray","searchArray","some","row","JSON","stringify","AllyGrid","props","gridSize","generateShipDivs","shipDivs","ship","ships","reference","e","current","display","currentShipRef","diffX","clientX","position","x","diffY","clientY","y","grabXRef","parseInt","grabYRef","handleMouseClick","preventDefault","left","top","width","orientation","size","height","border","cursor","generateGridDivs","gridDivs","forEach","col","j","backgroundColor","stopPropagation","handleDrop","shipName","button","shipObj","console","dir","shipMap","map","shipObjRefCurrent","shipsCopy","Object","assign","isPlaced","warn","allNeighborsExceptCurrentShip","neighbors","neighborPair","newMap","newNeighbors","coords","move","neighborsRow","neighborsCol","neighborsArray","setShips","dropRow","dropCol","currentShipName","grabX","grabY","placeX","placeY","placeCol","Math","floor","placeRow","newMapPair","gridTemplateColumns","gridTemplateRows","right","log"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst grid = [];\r\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\r\n\r\nconst neighborsMoves = [\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [1, -1],\r\n];\r\n\r\nfunction errorHandle(shipsObjRefCurrent) {\r\n  shipsObjRefCurrent.style.borderColor = \"red\";\r\n  setTimeout(() => (shipsObjRefCurrent.style.borderColor = \"blue\"), 500);\r\n  return false;\r\n}\r\n\r\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\r\n  return multidimensionalArray.some(\r\n    (row) => JSON.stringify(row) === JSON.stringify(searchArray)\r\n  );\r\n}\r\n\r\nexport default function AllyGrid(props) {\r\n  const gridSize = props.gridSize;\r\n\r\n  \r\n\r\n  function generateShipDivs() {\r\n    const shipDivs = [];\r\n    for (const ship in ships) {\r\n      shipDivs.push(\r\n        <div\r\n          ref={ships[ship].reference}\r\n          key={ship}\r\n          draggable\r\n          onDragEnd={(e) =>\r\n            (ships[ship].reference.current.style.display = \"inline\")\r\n          }\r\n          onDragStart={(e) => {\r\n            setTimeout(\r\n              () => (ships[ship].reference.current.style.display = \"none\")\r\n            );\r\n            currentShipRef.current = ship;\r\n            const diffX = e.clientX - ships[ship].position.x;\r\n            const diffY = e.clientY - ships[ship].position.y;\r\n            grabXRef.current = parseInt(diffX / gridSize);\r\n            grabYRef.current = parseInt(diffY / gridSize);\r\n          }}\r\n          onMouseUp={(e) => setTimeout(handleMouseClick, 0, e, ship)}\r\n          onContextMenu={(e) => e.preventDefault()}\r\n          style={{\r\n            position: \"absolute\",\r\n            left: ships[ship].position.x,\r\n            top: ships[ship].position.y,\r\n            width: (() => {\r\n              switch (ships[ship].orientation) {\r\n                case \"horizontal\":\r\n                  return `${gridSize * ships[ship].size - 4}px`;\r\n                case \"vertical\":\r\n                  return gridSize - 4;\r\n                default:\r\n                  return \"100px\";\r\n              }\r\n            })(),\r\n            height: (() => {\r\n              switch (ships[ship].orientation) {\r\n                case \"horizontal\":\r\n                  return gridSize - 4;\r\n                case \"vertical\":\r\n                  return `${gridSize * ships[ship].size - 4}px`;\r\n                default:\r\n                  return \"100px\";\r\n              }\r\n            })(),\r\n            border: \"solid 2px blue\",\r\n            cursor: \"grab\",\r\n          }}\r\n        ></div>\r\n      );\r\n    }\r\n    return shipDivs;\r\n  }\r\n\r\n  function generateGridDivs() {\r\n    const gridDivs = [];\r\n    grid.forEach((row, i) => {\r\n      row.forEach((col, j) => {\r\n        gridDivs.push(\r\n          <div\r\n            className=\"spot\"\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              height: `${gridSize - 2}px`,\r\n              width: `${gridSize - 2}px`,\r\n              border: \"solid 1px black\",\r\n            }}\r\n            key={`${i}-${j}`}\r\n            onDragStart={(e) => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              return false;\r\n            }}\r\n            onDragOver={(e) => {\r\n              e.preventDefault();\r\n              return false;\r\n            }}\r\n            onDrop={(e) => handleDrop(e, i, j)}\r\n          ></div>\r\n        );\r\n      });\r\n    });\r\n    return gridDivs;\r\n  }\r\n\r\n  function handleMouseClick(e, shipName) {\r\n    if (e.button !== 2) return;\r\n\r\n    const shipObj = ships[shipName];\r\n    console.dir(shipObj);\r\n    const shipMap = shipObj.map;\r\n    const shipObjRefCurrent = shipObj.reference.current;\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    if (shipObj.isPlaced) {\r\n      var row = shipMap[0][0];\r\n      var col = shipMap[0][1];\r\n\r\n      switch (shipObj.orientation) {\r\n        case \"vertical\":\r\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\r\n          break;\r\n        case \"horizontal\":\r\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\r\n          break;\r\n        default:\r\n          console.warn(\"wrong ship orientation in start rmb handler\");\r\n      }\r\n    }\r\n\r\n    let allNeighborsExceptCurrentShip = [];\r\n    for (const ship in ships) {\r\n      if (ship !== shipName) {\r\n        ships[ship].neighbors.forEach((neighborPair) =>\r\n          allNeighborsExceptCurrentShip.push(neighborPair)\r\n        );\r\n      }\r\n    }\r\n\r\n    let newMap = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          if (\r\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\r\n              row + i,\r\n              col,\r\n            ])\r\n          )\r\n            return errorHandle(shipObjRefCurrent);\r\n          newMap.push([row + i, col]);\r\n        }\r\n\r\n        shipsCopy[shipName].orientation = \"vertical\";\r\n        break;\r\n\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          if (\r\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\r\n              row,\r\n              col + i,\r\n            ])\r\n          )\r\n            return errorHandle(shipObjRefCurrent);\r\n          newMap.push([row, col + i]);\r\n        }\r\n\r\n        shipsCopy[shipName].orientation = \"horizontal\";\r\n        break;\r\n\r\n      default:\r\n        console.warn(\"wrong ship orientation in rmb\");\r\n    }\r\n\r\n    shipsCopy[shipName].map = newMap;\r\n\r\n    let newNeighbors = [];\r\n\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[shipName].neighbors = newNeighbors;\r\n\r\n    setShips(shipsCopy);\r\n  }\r\n\r\n  function handleDrop(e, dropRow, dropCol) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const currentShipName = currentShipRef.current;\r\n    const shipObj = ships[currentShipName];\r\n    const shipsObjRefCurrent = shipObj.reference.current;\r\n\r\n    const grabX = grabXRef.current;\r\n    const grabY = grabYRef.current;\r\n\r\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\r\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\r\n\r\n    const placeCol = Math.floor(placeX / gridSize);\r\n    const placeRow = Math.floor(placeY / gridSize);\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        if (placeCol > 10 - shipObj.size || placeCol < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      case \"vertical\":\r\n        if (placeRow > 10 - shipObj.size || placeRow < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle misplace check\"\r\n        );\r\n    }\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    let newMap = [];\r\n    let newNeighbors = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow + i;\r\n          const col = placeCol;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow;\r\n          const col = placeCol + i;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle, newMap loop\"\r\n        );\r\n    }\r\n    shipsCopy[currentShipName].map = newMap;\r\n\r\n    // calculate new neighbors\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[currentShipName].neighbors = newNeighbors;\r\n\r\n    shipsCopy[currentShipName].position.x = placeX;\r\n    shipsCopy[currentShipName].position.y = placeY;\r\n\r\n    shipsCopy[currentShipName].isPlaced = true;\r\n    setShips(shipsCopy);\r\n\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"AllyGrid\"\r\n        style={{\r\n          display: \"grid\",\r\n          width: `${gridSize * 10}px`,\r\n          gridTemplateColumns: `repeat(10,${gridSize}px)`,\r\n          gridTemplateRows: `repeat(10,${gridSize}px)`,\r\n        }}\r\n      >\r\n        {generateGridDivs()}\r\n      </div>\r\n      {generateShipDivs()}\r\n      <button\r\n        style={{ position: \"absolute\", right: 0 }}\r\n        onClick={() => {\r\n          for (const shipName in ships) {\r\n            if (!ships[shipName].isPlaced) {\r\n              console.log(\"not all ships placed\");\r\n              return;\r\n            }\r\n          }\r\n          console.log(\"field is ready for game!\");\r\n        }}\r\n      >\r\n        Ready\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}