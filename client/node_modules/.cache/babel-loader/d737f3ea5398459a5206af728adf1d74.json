{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\src\\\\App.js\";\nimport \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Grid from './components/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  function deepListCopy(l) {\n    return JSON.parse(JSON.stringify(l));\n  }\n\n  function gridOnClickHandler(ri, ci) {\n    let gridCopy = deepListCopy(grid);\n\n    if (grid[ri][ci] === \"s\") {\n      gridCopy[ri][ci] = \"h\";\n      setGrid(gridCopy);\n    } else if (grid[ri][ci] === \"e\") {\n      gridCopy[ri][ci] = \"m\";\n      setGrid(gridCopy);\n    }\n  }\n\n  function handleColor(spot) {\n    if (spot === \"h\") return \"pink\";\n    if (spot === \"m\") return \"gray\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(10,20px)\"\n    },\n    children: grid.map((row, i) => row.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spot\",\n      onClick: () => gridOnClickHandler(i, j),\n      style: {\n        backgroundColor: handleColor(grid[i][j]),\n        height: \"18px\",\n        width: \"18px\",\n        border: \"solid 1px black\"\n      }\n    }, `${i}-${j}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/src/App.js"],"names":["useEffect","useState","Grid","App","deepListCopy","l","JSON","parse","stringify","gridOnClickHandler","ri","ci","gridCopy","grid","setGrid","handleColor","spot","display","gridTemplateColumns","map","row","i","col","j","backgroundColor","height","width","border"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,eAAjB;;;AAEA,SAASC,GAAT,GAAe;AAGb,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,CAAf,CAAX,CAAP;AACD;;AAED,WAASI,kBAAT,CAA4BC,EAA5B,EAAgCC,EAAhC,EAAoC;AAClC,QAAIC,QAAQ,GAAGR,YAAY,CAACS,IAAD,CAA3B;;AACA,QAAIA,IAAI,CAACH,EAAD,CAAJ,CAASC,EAAT,MAAiB,GAArB,EAA0B;AACxBC,MAAAA,QAAQ,CAACF,EAAD,CAAR,CAAaC,EAAb,IAAmB,GAAnB;AACAG,MAAAA,OAAO,CAACF,QAAD,CAAP;AACD,KAHD,MAGO,IAAIC,IAAI,CAACH,EAAD,CAAJ,CAASC,EAAT,MAAiB,GAArB,EAA0B;AAC/BC,MAAAA,QAAQ,CAACF,EAAD,CAAR,CAAaC,EAAb,IAAmB,GAAnB;AACAG,MAAAA,OAAO,CAACF,QAAD,CAAP;AACD;AACF;;AAED,WAASG,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAIA,IAAI,KAAK,GAAb,EAAkB,OAAO,MAAP;AAClB,QAAIA,IAAI,KAAK,GAAb,EAAkB,OAAO,MAAP;AACnB;;AAED,sBACE;AACE,IAAA,SAAS,EAAC,KADZ;AAEE,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,mBAAmB,EAAE;AAAxC,KAFT;AAAA,cAIGL,IAAI,CAACM,GAAL,CAAS,CAACC,GAAD,EAAMC,CAAN,KACRD,GAAG,CAACD,GAAJ,CAAQ,CAACG,GAAD,EAAMC,CAAN,kBACN;AACE,MAAA,SAAS,EAAC,MADZ;AAGE,MAAA,OAAO,EAAE,MAAMd,kBAAkB,CAACY,CAAD,EAAIE,CAAJ,CAHnC;AAIE,MAAA,KAAK,EAAE;AACLC,QAAAA,eAAe,EAAET,WAAW,CAACF,IAAI,CAACQ,CAAD,CAAJ,CAAQE,CAAR,CAAD,CADvB;AAELE,QAAAA,MAAM,EAAE,MAFH;AAGLC,QAAAA,KAAK,EAAE,MAHF;AAILC,QAAAA,MAAM,EAAE;AAJH;AAJT,OAEQ,GAAEN,CAAE,IAAGE,CAAE,EAFjB;AAAA;AAAA;AAAA;AAAA,YADF,CADD;AAJH;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;KA7CQpB,G;AA+CT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Grid from './components/'\n\nfunction App() {\n  \n\n  function deepListCopy(l) {\n    return JSON.parse(JSON.stringify(l));\n  }\n\n  function gridOnClickHandler(ri, ci) {\n    let gridCopy = deepListCopy(grid);\n    if (grid[ri][ci] === \"s\") {\n      gridCopy[ri][ci] = \"h\";\n      setGrid(gridCopy);\n    } else if (grid[ri][ci] === \"e\") {\n      gridCopy[ri][ci] = \"m\";\n      setGrid(gridCopy);\n    }\n  }\n\n  function handleColor(spot) {\n    if (spot === \"h\") return \"pink\";\n    if (spot === \"m\") return \"gray\";\n  }\n\n  return (\n    <div\n      className=\"App\"\n      style={{ display: \"grid\", gridTemplateColumns: \"repeat(10,20px)\" }}\n    >\n      {grid.map((row, i) =>\n        row.map((col, j) => (\n          <div\n            className=\"spot\"\n            key={`${i}-${j}`}\n            onClick={() => gridOnClickHandler(i, j)}\n            style={{\n              backgroundColor: handleColor(grid[i][j]),\n              height: \"18px\",\n              width: \"18px\",\n              border: \"solid 1px black\",\n            }}\n          ></div>\n        ))\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}