{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\src\\\\components\\\\AllyGrid.js\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet grid = [];\n\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst neighborsMoves = [[0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1]];\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => shipsObjRefCurrent.style.borderColor = \"blue\", 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(row => JSON.stringify(row) === JSON.stringify(searchArray));\n}\n\nexport default function AllyGrid(gridSize) {\n  _s();\n\n  const currentShipRef = React.useRef();\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle misplace check\");\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle, newMap loop\");\n    }\n\n    shipsCopy[currentShipName].map = newMap; // calculate new neighbors\n\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GridContainer\",\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(10,20px)\"\n      },\n      children: grid.map((row, i) => row.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spot\",\n        onDragStart: e => e.preventDefault(),\n        onDragOver: e => {\n          e.preventDefault();\n          return false;\n        },\n        onDrop: e => handleDrop(e, i, j),\n        style: {\n          backgroundColor: \"white\",\n          height: \"18px\",\n          width: \"18px\",\n          border: \"solid 1px black\"\n        }\n      }, `${i}-${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Ships, {\n      gridSize: gridSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AllyGrid, \"JpEX4OtHwVRDq4elq76JmExGruc=\");\n\n_c = AllyGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllyGrid\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/src/components/AllyGrid.js"],"names":["grid","i","push","Array","from","neighborsMoves","errorHandle","shipsObjRefCurrent","style","borderColor","setTimeout","multidimensionalIncludes","multidimensionalArray","searchArray","some","row","JSON","stringify","AllyGrid","gridSize","currentShipRef","React","useRef","handleDrop","e","dropRow","dropCol","stopPropagation","preventDefault","currentShipName","current","shipObj","ships","reference","grabX","grabXRef","grabY","grabYRef","placeX","placeY","placeCol","Math","floor","placeRow","orientation","size","console","warn","shipsCopy","Object","assign","newMap","newNeighbors","col","newMapPair","shipName","neighbors","map","forEach","coords","move","neighborsRow","neighborsCol","neighborsArray","position","x","y","isPlaced","setShips","display","gridTemplateColumns","j","backgroundColor","height","width","border"],"mappings":"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","sourcesContent":["let grid = [];\r\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\r\n\r\nconst neighborsMoves = [\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [1, -1],\r\n];\r\n\r\nfunction errorHandle(shipsObjRefCurrent) {\r\n  shipsObjRefCurrent.style.borderColor = \"red\";\r\n  setTimeout(() => (shipsObjRefCurrent.style.borderColor = \"blue\"), 500);\r\n  return false;\r\n}\r\n\r\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\r\n  return multidimensionalArray.some(\r\n    (row) => JSON.stringify(row) === JSON.stringify(searchArray)\r\n  );\r\n}\r\n\r\nexport default function AllyGrid(gridSize) {\r\n  const currentShipRef = React.useRef();\r\n  \r\n  function handleDrop(e, dropRow, dropCol) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const currentShipName = currentShipRef.current;\r\n    const shipObj = ships[currentShipName];\r\n    const shipsObjRefCurrent = shipObj.reference.current;\r\n\r\n    const grabX = grabXRef.current;\r\n    const grabY = grabYRef.current;\r\n\r\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\r\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\r\n\r\n    const placeCol = Math.floor(placeX / gridSize);\r\n    const placeRow = Math.floor(placeY / gridSize);\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        if (placeCol > 10 - shipObj.size || placeCol < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      case \"vertical\":\r\n        if (placeRow > 10 - shipObj.size || placeRow < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle misplace check\"\r\n        );\r\n    }\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    let newMap = [];\r\n    let newNeighbors = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow + i;\r\n          const col = placeCol;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow;\r\n          const col = placeCol + i;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle, newMap loop\"\r\n        );\r\n    }\r\n    shipsCopy[currentShipName].map = newMap;\r\n\r\n    // calculate new neighbors\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[currentShipName].neighbors = newNeighbors;\r\n\r\n    shipsCopy[currentShipName].position.x = placeX;\r\n    shipsCopy[currentShipName].position.y = placeY;\r\n\r\n    shipsCopy[currentShipName].isPlaced = true;\r\n    setShips(shipsCopy);\r\n\r\n    return false;\r\n  }\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"GridContainer\"\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: \"repeat(10,20px)\",\r\n        }}\r\n      >\r\n        {grid.map((row, i) =>\r\n          row.map((col, j) => (\r\n            <div\r\n              className=\"spot\"\r\n              key={`${i}-${j}`}\r\n              onDragStart={(e) => e.preventDefault()}\r\n              onDragOver={(e) => {\r\n                e.preventDefault();\r\n                return false;\r\n              }}\r\n              onDrop={(e) => handleDrop(e, i, j)}\r\n              style={{\r\n                backgroundColor: \"white\",\r\n                height: \"18px\",\r\n                width: \"18px\",\r\n                border: \"solid 1px black\",\r\n              }}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <Ships gridSize={gridSize} />\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}