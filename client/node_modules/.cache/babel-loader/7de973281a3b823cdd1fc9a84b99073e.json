{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\client\\\\src\\\\components\\\\SeaWars.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSize = 30;\nconst grid = [];\n\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst neighborsMoves = [[0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1]];\nlet isFieldReady = false;\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => shipsObjRefCurrent.style.borderColor = \"blue\", 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(row => JSON.stringify(row) === JSON.stringify(searchArray));\n}\n\nexport default function SeaWars(_ref) {\n  _s();\n\n  let {\n    socket,\n    roomID,\n    isFieldReady\n  } = _ref;\n  React.useEffect(() => {\n    socket.on(\"hit_result\", data => {\n      console.log(data);\n    });\n  }, [socket]);\n  const currentShipRef = React.useRef();\n  const grabXRef = React.useRef();\n  const grabYRef = React.useRef();\n  const [ships, setShips] = React.useState({\n    ship4: {\n      orientation: \"horizontal\",\n      size: 4,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship3_1: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: {\n        x: 140,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship3_2: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: {\n        x: 140,\n        y: 420\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_1: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_2: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 390\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_3: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 460\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_1: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 450\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_2: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 50,\n        y: 450\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_3: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 90,\n        y: 450\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_4: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 490\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    }\n  });\n  const [showField, setShowField] = React.useState(false);\n\n  function generateGridDivsEnemy() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spot\",\n          style: {\n            backgroundColor: \"white\",\n            height: `${gridSize - 2}px`,\n            width: `${gridSize - 2}px`,\n            border: \"solid 1px black\"\n          },\n          onDragStart: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n          },\n          onClick: async () => {\n            const data = {\n              roomID,\n              row: i,\n              col: j\n            };\n            await socket.emit(\"hit\", data);\n          }\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this));\n      });\n    });\n    return gridDivs;\n  }\n\n  function generateShipDivsAlly() {\n    const shipDivs = [];\n\n    for (const ship in ships) {\n      shipDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ships[ship].reference,\n        draggable: true,\n        onDragEnd: e => ships[ship].reference.current.style.display = \"inline\",\n        onDragStart: e => {\n          setTimeout(() => ships[ship].reference.current.style.display = \"none\");\n          currentShipRef.current = ship;\n          const diffX = e.clientX - ships[ship].position.x;\n          const diffY = e.clientY - ships[ship].position.y;\n          grabXRef.current = parseInt(diffX / gridSize);\n          grabYRef.current = parseInt(diffY / gridSize);\n        },\n        onMouseUp: e => setTimeout(handleMouseClick, 0, e, ship),\n        onContextMenu: e => e.preventDefault(),\n        style: {\n          position: \"absolute\",\n          left: ships[ship].position.x,\n          top: ships[ship].position.y,\n          width: (() => {\n            switch (ships[ship].orientation) {\n              case \"horizontal\":\n                return `${gridSize * ships[ship].size - 4}px`;\n\n              case \"vertical\":\n                return gridSize - 4;\n\n              default:\n                return \"100px\";\n            }\n          })(),\n          height: (() => {\n            switch (ships[ship].orientation) {\n              case \"horizontal\":\n                return gridSize - 4;\n\n              case \"vertical\":\n                return `${gridSize * ships[ship].size - 4}px`;\n\n              default:\n                return \"100px\";\n            }\n          })(),\n          border: \"solid 2px blue\",\n          cursor: \"grab\"\n        }\n      }, ship, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this));\n    }\n\n    return shipDivs;\n  }\n\n  function generateGridDivsAlly() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spot\",\n          style: {\n            backgroundColor: \"white\",\n            height: `${gridSize - 2}px`,\n            width: `${gridSize - 2}px`,\n            border: \"solid 1px black\"\n          },\n          onDragStart: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n          },\n          onDragOver: e => {\n            e.preventDefault();\n            return false;\n          },\n          onDrop: e => handleDrop(e, i, j)\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this));\n      });\n    });\n    return gridDivs;\n  }\n\n  function handleMouseClick(e, shipName) {\n    if (e.button !== 2) return;\n    const shipObj = ships[shipName];\n    console.dir(shipObj);\n    const shipMap = shipObj.map;\n    const shipObjRefCurrent = shipObj.reference.current;\n    let shipsCopy = Object.assign({}, ships);\n\n    if (shipObj.isPlaced) {\n      var row = shipMap[0][0];\n      var col = shipMap[0][1];\n\n      switch (shipObj.orientation) {\n        case \"vertical\":\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        case \"horizontal\":\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        default:\n          console.warn(\"wrong ship orientation in start rmb handler\");\n      }\n    }\n\n    let allNeighborsExceptCurrentShip = [];\n\n    for (const ship in ships) {\n      if (ship !== shipName) {\n        ships[ship].neighbors.forEach(neighborPair => allNeighborsExceptCurrentShip.push(neighborPair));\n      }\n    }\n\n    let newMap = [];\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row + i, col])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row + i, col]);\n        }\n\n        shipsCopy[shipName].orientation = \"vertical\";\n        break;\n\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row, col + i])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row, col + i]);\n        }\n\n        shipsCopy[shipName].orientation = \"horizontal\";\n        break;\n\n      default:\n        console.warn(\"wrong ship orientation in rmb\");\n    }\n\n    shipsCopy[shipName].map = newMap;\n    let newNeighbors = [];\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[shipName].neighbors = newNeighbors;\n    setShips(shipsCopy);\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle misplace check\");\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle, newMap loop\");\n    }\n\n    shipsCopy[currentShipName].map = newMap; // calculate new neighbors\n\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: `repeat(2,${gridSize * 10}px)`,\n      gridTemplateRows: \"repeat(2,auto)\",\n      gap: \"50px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AllyGrid\",\n      style: {\n        display: \"grid\",\n        width: `${gridSize * 10}px`,\n        gridTemplateColumns: `repeat(10,${gridSize}px)`,\n        gridTemplateRows: `repeat(10,${gridSize}px)`\n      },\n      children: generateGridDivsAlly()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this), generateShipDivsAlly(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"EnemyGrid\",\n      style: {\n        display: \"grid\",\n        width: `${gridSize * 10}px`,\n        gridTemplateColumns: `repeat(10,${gridSize}px)`,\n        gridTemplateRows: `repeat(10,${gridSize}px)`\n      },\n      children: generateGridDivsEnemy()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: \"absolute\",\n        right: 0\n      },\n      onClick: () => {\n        for (const shipName in ships) {\n          if (!ships[shipName].isPlaced) {\n            console.log(\"not all ships placed\");\n            return;\n          }\n        }\n\n        console.log(\"field is ready for game!\");\n        isFieldReady = true;\n        console.log(ships.ship4.reference.current);\n        ships.ship4.reference.current.draggable = false;\n\n        ships.ship4.reference.current.onDragStart = e => e.preventDefault();\n\n        console.dir(ships.ship4.reference.current);\n      },\n      children: \"Ready\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 475,\n    columnNumber: 5\n  }, this);\n} // .App {\n//   font-family: sans-serif;\n//   text-align: center;\n// }\n// .div {\n//   position: relative;\n// }\n// .div::after {\n//   position: absolute;\n//   content: \"X\";\n//   width: 50px;\n//   height: 50px;\n//   background-repeat: no-repeat;\n//   background-position: 75% 40%;\n// .App {\n//   font-family: sans-serif;\n//   text-align: center;\n// }\n// .div {\n//   position: relative;\n// }\n// .div::after {\n//   position: absolute;\n//   content: \"\";\n//   width: 50px;\n//   height: 50px;\n//   background: url(\"https://memepedia.ru/wp-content/uploads/2022/01/krutye-skelety-mem-3.jpg\");\n// }\n\n_s(SeaWars, \"YvFySniioOxxffveu/LVVnR3PR0=\");\n\n_c = SeaWars;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeaWars\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/client/src/components/SeaWars.js"],"names":["React","gridSize","grid","i","push","Array","from","neighborsMoves","isFieldReady","errorHandle","shipsObjRefCurrent","style","borderColor","setTimeout","multidimensionalIncludes","multidimensionalArray","searchArray","some","row","JSON","stringify","SeaWars","socket","roomID","useEffect","on","data","console","log","currentShipRef","useRef","grabXRef","grabYRef","ships","setShips","useState","ship4","orientation","size","reference","position","x","y","neighbors","map","isPlaced","ship3_1","ship3_2","ship2_1","ship2_2","ship2_3","ship1_1","ship1_2","ship1_3","ship1_4","showField","setShowField","generateGridDivsEnemy","gridDivs","forEach","col","j","backgroundColor","height","width","border","e","preventDefault","stopPropagation","emit","generateShipDivsAlly","shipDivs","ship","current","display","diffX","clientX","diffY","clientY","parseInt","handleMouseClick","left","top","cursor","generateGridDivsAlly","handleDrop","shipName","button","shipObj","dir","shipMap","shipObjRefCurrent","shipsCopy","Object","assign","warn","allNeighborsExceptCurrentShip","neighborPair","newMap","newNeighbors","coords","move","neighborsRow","neighborsCol","neighborsArray","dropRow","dropCol","currentShipName","grabX","grabY","placeX","placeY","placeCol","Math","floor","placeRow","newMapPair","gridTemplateColumns","gridTemplateRows","gap","right","draggable","onDragStart"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst gridSize = 30;\n\nconst grid = [];\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst neighborsMoves = [\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n];\n\nlet isFieldReady = false;\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => (shipsObjRefCurrent.style.borderColor = \"blue\"), 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(\n    (row) => JSON.stringify(row) === JSON.stringify(searchArray)\n  );\n}\n\nexport default function SeaWars({ socket, roomID, isFieldReady }) {\n  React.useEffect(() => {\n    socket.on(\"hit_result\", (data) => {\n      console.log(data);\n    });\n  }, [socket]);\n\n  const currentShipRef = React.useRef();\n  const grabXRef = React.useRef();\n  const grabYRef = React.useRef();\n\n  const [ships, setShips] = React.useState({\n    ship4: {\n      orientation: \"horizontal\",\n      size: 4,\n      reference: React.useRef(),\n      position: { x: 10, y: 320 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship3_1: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: { x: 140, y: 320 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship3_2: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: { x: 140, y: 420 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship2_1: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: { x: 240, y: 320 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship2_2: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: { x: 240, y: 390 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship2_3: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: { x: 240, y: 460 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship1_1: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: { x: 10, y: 450 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship1_2: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: { x: 50, y: 450 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship1_3: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: { x: 90, y: 450 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship1_4: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: { x: 10, y: 490 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n  });\n\n  const [showField, setShowField] = React.useState(false);\n\n  function generateGridDivsEnemy() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push(\n          <div\n            className=\"spot\"\n            style={{\n              backgroundColor: \"white\",\n              height: `${gridSize - 2}px`,\n              width: `${gridSize - 2}px`,\n              border: \"solid 1px black\",\n            }}\n            onDragStart={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              return false;\n            }}\n            onClick={async () => {\n              const data = {\n                roomID,\n                row: i,\n                col: j,\n              };\n              await socket.emit(\"hit\", data);\n            }}\n            key={`${i}-${j}`}\n          ></div>\n        );\n      });\n    });\n    return gridDivs;\n  }\n\n  function generateShipDivsAlly() {\n    const shipDivs = [];\n    for (const ship in ships) {\n      shipDivs.push(\n        <div\n          ref={ships[ship].reference}\n          key={ship}\n          draggable\n          onDragEnd={(e) =>\n            (ships[ship].reference.current.style.display = \"inline\")\n          }\n          onDragStart={(e) => {\n            setTimeout(\n              () => (ships[ship].reference.current.style.display = \"none\")\n            );\n            currentShipRef.current = ship;\n            const diffX = e.clientX - ships[ship].position.x;\n            const diffY = e.clientY - ships[ship].position.y;\n            grabXRef.current = parseInt(diffX / gridSize);\n            grabYRef.current = parseInt(diffY / gridSize);\n          }}\n          onMouseUp={(e) => setTimeout(handleMouseClick, 0, e, ship)}\n          onContextMenu={(e) => e.preventDefault()}\n          style={{\n            position: \"absolute\",\n            left: ships[ship].position.x,\n            top: ships[ship].position.y,\n            width: (() => {\n              switch (ships[ship].orientation) {\n                case \"horizontal\":\n                  return `${gridSize * ships[ship].size - 4}px`;\n                case \"vertical\":\n                  return gridSize - 4;\n                default:\n                  return \"100px\";\n              }\n            })(),\n            height: (() => {\n              switch (ships[ship].orientation) {\n                case \"horizontal\":\n                  return gridSize - 4;\n                case \"vertical\":\n                  return `${gridSize * ships[ship].size - 4}px`;\n                default:\n                  return \"100px\";\n              }\n            })(),\n            border: \"solid 2px blue\",\n            cursor: \"grab\",\n          }}\n        ></div>\n      );\n    }\n    return shipDivs;\n  }\n\n  function generateGridDivsAlly() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push(\n          <div\n            className=\"spot\"\n            style={{\n              backgroundColor: \"white\",\n              height: `${gridSize - 2}px`,\n              width: `${gridSize - 2}px`,\n              border: \"solid 1px black\",\n            }}\n            key={`${i}-${j}`}\n            onDragStart={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              return false;\n            }}\n            onDragOver={(e) => {\n              e.preventDefault();\n              return false;\n            }}\n            onDrop={(e) => handleDrop(e, i, j)}\n          ></div>\n        );\n      });\n    });\n    return gridDivs;\n  }\n\n  function handleMouseClick(e, shipName) {\n    if (e.button !== 2) return;\n\n    const shipObj = ships[shipName];\n    console.dir(shipObj);\n    const shipMap = shipObj.map;\n    const shipObjRefCurrent = shipObj.reference.current;\n\n    let shipsCopy = Object.assign({}, ships);\n\n    if (shipObj.isPlaced) {\n      var row = shipMap[0][0];\n      var col = shipMap[0][1];\n\n      switch (shipObj.orientation) {\n        case \"vertical\":\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n        case \"horizontal\":\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n        default:\n          console.warn(\"wrong ship orientation in start rmb handler\");\n      }\n    }\n\n    let allNeighborsExceptCurrentShip = [];\n    for (const ship in ships) {\n      if (ship !== shipName) {\n        ships[ship].neighbors.forEach((neighborPair) =>\n          allNeighborsExceptCurrentShip.push(neighborPair)\n        );\n      }\n    }\n\n    let newMap = [];\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\n              row + i,\n              col,\n            ])\n          )\n            return errorHandle(shipObjRefCurrent);\n          newMap.push([row + i, col]);\n        }\n\n        shipsCopy[shipName].orientation = \"vertical\";\n        break;\n\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\n              row,\n              col + i,\n            ])\n          )\n            return errorHandle(shipObjRefCurrent);\n          newMap.push([row, col + i]);\n        }\n\n        shipsCopy[shipName].orientation = \"horizontal\";\n        break;\n\n      default:\n        console.warn(\"wrong ship orientation in rmb\");\n    }\n\n    shipsCopy[shipName].map = newMap;\n\n    let newNeighbors = [];\n\n    newMap.forEach((coords) => {\n      neighborsMoves.forEach((move) => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (\n          neighborsRow >= 0 &&\n          neighborsRow <= 9 &&\n          neighborsCol >= 0 &&\n          neighborsCol <= 9\n        )\n          if (\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\n            !multidimensionalIncludes(newMap, neighborsArray)\n          )\n            newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[shipName].neighbors = newNeighbors;\n\n    setShips(shipsCopy);\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0)\n          return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0)\n          return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\n          \"ship have wrong orientation in dropHandle misplace check\"\n        );\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (\n                multidimensionalIncludes(\n                  shipsCopy[shipName].neighbors,\n                  newMapPair\n                )\n              )\n                return errorHandle(shipsObjRefCurrent);\n            }\n          }\n          newMap.push(newMapPair);\n        }\n        break;\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (\n                multidimensionalIncludes(\n                  shipsCopy[shipName].neighbors,\n                  newMapPair\n                )\n              )\n                return errorHandle(shipsObjRefCurrent);\n            }\n          }\n          newMap.push(newMapPair);\n        }\n        break;\n      default:\n        return console.warn(\n          \"ship have wrong orientation in dropHandle, newMap loop\"\n        );\n    }\n    shipsCopy[currentShipName].map = newMap;\n\n    // calculate new neighbors\n    newMap.forEach((coords) => {\n      neighborsMoves.forEach((move) => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (\n          neighborsRow >= 0 &&\n          neighborsRow <= 9 &&\n          neighborsCol >= 0 &&\n          neighborsCol <= 9\n        )\n          if (\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\n            !multidimensionalIncludes(newMap, neighborsArray)\n          )\n            newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n\n    return false;\n  }\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(2,${gridSize * 10}px)`,\n        gridTemplateRows: \"repeat(2,auto)\",\n        gap: \"50px\",\n      }}\n    >\n      <div\n        className=\"AllyGrid\"\n        style={{\n          display: \"grid\",\n          width: `${gridSize * 10}px`,\n          gridTemplateColumns: `repeat(10,${gridSize}px)`,\n          gridTemplateRows: `repeat(10,${gridSize}px)`,\n        }}\n      >\n        {generateGridDivsAlly()}\n      </div>\n      {generateShipDivsAlly()}\n      <div\n        className=\"EnemyGrid\"\n        style={{\n          display: \"grid\",\n          width: `${gridSize * 10}px`,\n          gridTemplateColumns: `repeat(10,${gridSize}px)`,\n          gridTemplateRows: `repeat(10,${gridSize}px)`,\n        }}\n      >\n        {generateGridDivsEnemy()}\n      </div>\n      <button\n        style={{ position: \"absolute\", right: 0 }}\n        onClick={() => {\n          for (const shipName in ships) {\n            if (!ships[shipName].isPlaced) {\n              console.log(\"not all ships placed\");\n              return;\n            }\n          }\n          console.log(\"field is ready for game!\");\n          isFieldReady = true;\n          console.log(ships.ship4.reference.current);\n          ships.ship4.reference.current.draggable = false;\n          ships.ship4.reference.current.onDragStart = (e) => e.preventDefault();\n          console.dir(ships.ship4.reference.current);\n        }}\n      >\n        Ready\n      </button>\n    </div>\n  );\n}\n\n// .App {\n//   font-family: sans-serif;\n//   text-align: center;\n// }\n\n// .div {\n//   position: relative;\n// }\n\n// .div::after {\n//   position: absolute;\n//   content: \"X\";\n//   width: 50px;\n//   height: 50px;\n//   background-repeat: no-repeat;\n//   background-position: 75% 40%;\n// .App {\n//   font-family: sans-serif;\n//   text-align: center;\n// }\n\n// .div {\n//   position: relative;\n// }\n\n// .div::after {\n//   position: absolute;\n//   content: \"\";\n//   width: 50px;\n//   height: 50px;\n//   background: url(\"https://memepedia.ru/wp-content/uploads/2022/01/krutye-skelety-mem-3.jpg\");\n// }\n"]},"metadata":{},"sourceType":"module"}