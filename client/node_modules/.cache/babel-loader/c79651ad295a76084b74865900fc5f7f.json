{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\client\\\\src\\\\components\\\\AllyGrid.js\";\nimport React from \"react\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst grid = [];\n\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst neighborsMoves = [[0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1]];\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => shipsObjRefCurrent.style.borderColor = \"blue\", 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(row => JSON.stringify(row) === JSON.stringify(searchArray));\n}\n\nexport default function AllyGrid(props) {\n  const gridSize = props.gridSize;\n\n  function handleMouseClick(e, shipName) {\n    if (e.button !== 2) return;\n    const shipObj = ships[shipName];\n    console.dir(shipObj);\n    const shipMap = shipObj.map;\n    const shipObjRefCurrent = shipObj.reference.current;\n    let shipsCopy = Object.assign({}, ships);\n\n    if (shipObj.isPlaced) {\n      var row = shipMap[0][0];\n      var col = shipMap[0][1];\n\n      switch (shipObj.orientation) {\n        case \"vertical\":\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        case \"horizontal\":\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        default:\n          console.warn(\"wrong ship orientation in start rmb handler\");\n      }\n    }\n\n    let allNeighborsExceptCurrentShip = [];\n\n    for (const ship in ships) {\n      if (ship !== shipName) {\n        ships[ship].neighbors.forEach(neighborPair => allNeighborsExceptCurrentShip.push(neighborPair));\n      }\n    }\n\n    let newMap = [];\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row + i, col])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row + i, col]);\n        }\n\n        shipsCopy[shipName].orientation = \"vertical\";\n        break;\n\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row, col + i])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row, col + i]);\n        }\n\n        shipsCopy[shipName].orientation = \"horizontal\";\n        break;\n\n      default:\n        console.warn(\"wrong ship orientation in rmb\");\n    }\n\n    shipsCopy[shipName].map = newMap;\n    let newNeighbors = [];\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[shipName].neighbors = newNeighbors;\n    setShips(shipsCopy);\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle misplace check\");\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle, newMap loop\");\n    }\n\n    shipsCopy[currentShipName].map = newMap; // calculate new neighbors\n\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AllyGrid\",\n      style: {\n        display: \"grid\",\n        width: `${gridSize * 10}px`,\n        gridTemplateColumns: `repeat(10,${gridSize}px)`,\n        gridTemplateRows: `repeat(10,${gridSize}px)`\n      },\n      children: generateGridDivs()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this), generateShipDivs(), /*#__PURE__*/_jsxDEV(\"button\", {\n      style: {\n        position: \"absolute\",\n        right: 0\n      },\n      onClick: () => {\n        for (const shipName in ships) {\n          if (!ships[shipName].isPlaced) {\n            console.log(\"not all ships placed\");\n            return;\n          }\n        }\n\n        console.log(\"field is ready for game!\");\n      },\n      children: \"Ready\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = AllyGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllyGrid\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/client/src/components/AllyGrid.js"],"names":["React","grid","i","push","Array","from","neighborsMoves","errorHandle","shipsObjRefCurrent","style","borderColor","setTimeout","multidimensionalIncludes","multidimensionalArray","searchArray","some","row","JSON","stringify","AllyGrid","props","gridSize","handleMouseClick","e","shipName","button","shipObj","ships","console","dir","shipMap","map","shipObjRefCurrent","reference","current","shipsCopy","Object","assign","isPlaced","col","orientation","size","warn","allNeighborsExceptCurrentShip","ship","neighbors","forEach","neighborPair","newMap","newNeighbors","coords","move","neighborsRow","neighborsCol","neighborsArray","setShips","handleDrop","dropRow","dropCol","stopPropagation","preventDefault","currentShipName","currentShipRef","grabX","grabXRef","grabY","grabYRef","placeX","placeY","placeCol","Math","floor","placeRow","newMapPair","position","x","y","display","width","gridTemplateColumns","gridTemplateRows","generateGridDivs","generateShipDivs","right","log"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst grid = [];\r\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\r\n\r\nconst neighborsMoves = [\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [1, -1],\r\n];\r\n\r\nfunction errorHandle(shipsObjRefCurrent) {\r\n  shipsObjRefCurrent.style.borderColor = \"red\";\r\n  setTimeout(() => (shipsObjRefCurrent.style.borderColor = \"blue\"), 500);\r\n  return false;\r\n}\r\n\r\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\r\n  return multidimensionalArray.some(\r\n    (row) => JSON.stringify(row) === JSON.stringify(searchArray)\r\n  );\r\n}\r\n\r\nexport default function AllyGrid(props) {\r\n  const gridSize = props.gridSize;\r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n  function handleMouseClick(e, shipName) {\r\n    if (e.button !== 2) return;\r\n\r\n    const shipObj = ships[shipName];\r\n    console.dir(shipObj);\r\n    const shipMap = shipObj.map;\r\n    const shipObjRefCurrent = shipObj.reference.current;\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    if (shipObj.isPlaced) {\r\n      var row = shipMap[0][0];\r\n      var col = shipMap[0][1];\r\n\r\n      switch (shipObj.orientation) {\r\n        case \"vertical\":\r\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\r\n          break;\r\n        case \"horizontal\":\r\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\r\n          break;\r\n        default:\r\n          console.warn(\"wrong ship orientation in start rmb handler\");\r\n      }\r\n    }\r\n\r\n    let allNeighborsExceptCurrentShip = [];\r\n    for (const ship in ships) {\r\n      if (ship !== shipName) {\r\n        ships[ship].neighbors.forEach((neighborPair) =>\r\n          allNeighborsExceptCurrentShip.push(neighborPair)\r\n        );\r\n      }\r\n    }\r\n\r\n    let newMap = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          if (\r\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\r\n              row + i,\r\n              col,\r\n            ])\r\n          )\r\n            return errorHandle(shipObjRefCurrent);\r\n          newMap.push([row + i, col]);\r\n        }\r\n\r\n        shipsCopy[shipName].orientation = \"vertical\";\r\n        break;\r\n\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          if (\r\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\r\n              row,\r\n              col + i,\r\n            ])\r\n          )\r\n            return errorHandle(shipObjRefCurrent);\r\n          newMap.push([row, col + i]);\r\n        }\r\n\r\n        shipsCopy[shipName].orientation = \"horizontal\";\r\n        break;\r\n\r\n      default:\r\n        console.warn(\"wrong ship orientation in rmb\");\r\n    }\r\n\r\n    shipsCopy[shipName].map = newMap;\r\n\r\n    let newNeighbors = [];\r\n\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[shipName].neighbors = newNeighbors;\r\n\r\n    setShips(shipsCopy);\r\n  }\r\n\r\n  function handleDrop(e, dropRow, dropCol) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const currentShipName = currentShipRef.current;\r\n    const shipObj = ships[currentShipName];\r\n    const shipsObjRefCurrent = shipObj.reference.current;\r\n\r\n    const grabX = grabXRef.current;\r\n    const grabY = grabYRef.current;\r\n\r\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\r\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\r\n\r\n    const placeCol = Math.floor(placeX / gridSize);\r\n    const placeRow = Math.floor(placeY / gridSize);\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        if (placeCol > 10 - shipObj.size || placeCol < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      case \"vertical\":\r\n        if (placeRow > 10 - shipObj.size || placeRow < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle misplace check\"\r\n        );\r\n    }\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    let newMap = [];\r\n    let newNeighbors = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow + i;\r\n          const col = placeCol;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow;\r\n          const col = placeCol + i;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle, newMap loop\"\r\n        );\r\n    }\r\n    shipsCopy[currentShipName].map = newMap;\r\n\r\n    // calculate new neighbors\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[currentShipName].neighbors = newNeighbors;\r\n\r\n    shipsCopy[currentShipName].position.x = placeX;\r\n    shipsCopy[currentShipName].position.y = placeY;\r\n\r\n    shipsCopy[currentShipName].isPlaced = true;\r\n    setShips(shipsCopy);\r\n\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"AllyGrid\"\r\n        style={{\r\n          display: \"grid\",\r\n          width: `${gridSize * 10}px`,\r\n          gridTemplateColumns: `repeat(10,${gridSize}px)`,\r\n          gridTemplateRows: `repeat(10,${gridSize}px)`,\r\n        }}\r\n      >\r\n        {generateGridDivs()}\r\n      </div>\r\n      {generateShipDivs()}\r\n      <button\r\n        style={{ position: \"absolute\", right: 0 }}\r\n        onClick={() => {\r\n          for (const shipName in ships) {\r\n            if (!ships[shipName].isPlaced) {\r\n              console.log(\"not all ships placed\");\r\n              return;\r\n            }\r\n          }\r\n          console.log(\"field is ready for game!\");\r\n        }}\r\n      >\r\n        Ready\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}