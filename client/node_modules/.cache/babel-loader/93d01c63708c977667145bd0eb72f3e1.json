{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\nconst gridSize = 30;\nconst grid = [];\n\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst enemyGridRefs = [];\n\nfor (let i = 0; i < 10; i++) enemyGridRefs.push(Array.from(Array(10), () => /*#__PURE__*/React.createRef()));\n\nconst allyGridRefs = [];\n\nfor (let i = 0; i < 10; i++) allyGridRefs.push(Array.from(Array(10), () => /*#__PURE__*/React.createRef()));\n\nconst gridContent = [];\n\nfor (let i = 0; i < 10; i++) gridContent.push(Array.from(Array(10), () => \"\"));\n\nconst neighborsMoves = [[0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1]];\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => shipsObjRefCurrent.style.borderColor = \"blue\", 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(row => JSON.stringify(row) === JSON.stringify(searchArray));\n}\n\nfunction deepListCopy(l) {\n  return JSON.parse(JSON.stringify(l));\n}\n\nexport default function SeaWars() {\n  _s();\n\n  const [username, setUsername] = React.useState(\"\");\n  const [roomID, setRoomID] = React.useState(\"\");\n  const [gridContentState, setGridContentState] = React.useState(gridContent);\n  const [turn, setTurn] = React.useState(false);\n  const [fieldReady, setFieldReady] = React.useState(false);\n  const [showField, setShowField] = React.useState(false);\n\n  function joinRoom() {\n    if (username && roomID) {\n      socket.emit(\"join_room\", roomID);\n    }\n  }\n\n  React.useEffect(() => {\n    socket.on(\"hit_back\", data => {\n      setGridContentState(prev => {\n        const gridContentStateCopy = deepListCopy(prev);\n\n        if (grid[data.row][data.col]) {\n          gridContentStateCopy[data.row][data.col] = \"x\";\n          const hit_result_data = {\n            row: data.row,\n            col: data.row,\n            mark: \"x\"\n          };\n          socket.emit(\"hit_result\", hit_result_data); // allyGridRefs[data.row][data.col].current.class = \"spotcross\";\n          // allyGridRefs[data.row][data.col].current.className = \"spotcross\";\n        } else {\n          const hit_result_data = {\n            row: data.row,\n            col: data.row,\n            mark: \"x\"\n          };\n          socket.emit(\"hit_result\", hit_result_data);\n          gridContentStateCopy[data.row][data.col] = \"o\"; // allyGridRefs[data.row][data.col].current.class = \"spotdot\";\n          // allyGridRefs[data.row][data.col].current.className = \"spotdot\";\n        }\n\n        return gridContentStateCopy;\n      });\n    });\n    socket.on(\"hit_result_back\", data => {\n      setGridContentState(prev => {\n        const gridContentStateCopy = deepListCopy(prev);\n        gridContentStateCopy[data.row][data.col] = data.mark;\n        socket.emit(\"change_turn\", true);\n        return gridContentStateCopy;\n      });\n    });\n    socket.on(\"change_turn_back\", isTurn => {\n      turn = isTurn;\n    });\n    socket.on(\"success_join\", data => {\n      setShowField(true);\n    });\n    socket.on(\"failed_join\", data => {\n      alert(\"failed to join, room is full\");\n    });\n  }, [socket]);\n  const currentShipRef = React.useRef();\n  const grabXRef = React.useRef();\n  const grabYRef = React.useRef();\n  const [ships, setShips] = React.useState({\n    ship4: {\n      orientation: \"horizontal\",\n      size: 4,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship3_1: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: {\n        x: 140,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship3_2: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: {\n        x: 140,\n        y: 420\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_1: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_2: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 390\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_3: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 460\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_1: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 450\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_2: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 50,\n        y: 450\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_3: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 90,\n        y: 450\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_4: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 490\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    }\n  });\n\n  function generateGridDivsEnemy() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: enemyGridRefs[i][j],\n          className: \"spot\",\n          style: {\n            backgroundColor: \"white\",\n            height: `${gridSize - 2}px`,\n            width: `${gridSize - 2}px`,\n            border: \"solid 1px black\"\n          },\n          onDragStart: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n          },\n          onClick: async () => {\n            turn = false;\n            const data = {\n              roomID,\n              row: i,\n              col: j\n            };\n            await socket.emit(\"hit\", data);\n          }\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this));\n      });\n    });\n    return gridDivs;\n  }\n\n  function generateShipDivsAlly() {\n    const shipDivs = [];\n\n    for (const ship in ships) {\n      shipDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ships[ship].reference,\n        draggable: true,\n        onDragEnd: e => ships[ship].reference.current.style.display = \"inline\",\n        onDragStart: e => {\n          setTimeout(() => ships[ship].reference.current.style.display = \"none\");\n          currentShipRef.current = ship;\n          const diffX = e.clientX - ships[ship].position.x;\n          const diffY = e.clientY - ships[ship].position.y;\n          grabXRef.current = parseInt(diffX / gridSize);\n          grabYRef.current = parseInt(diffY / gridSize);\n        },\n        onMouseUp: e => setTimeout(handleMouseClick, 0, e, ship),\n        onContextMenu: e => e.preventDefault(),\n        style: {\n          position: \"absolute\",\n          left: ships[ship].position.x,\n          top: ships[ship].position.y,\n          width: (() => {\n            switch (ships[ship].orientation) {\n              case \"horizontal\":\n                return `${gridSize * ships[ship].size - 4}px`;\n\n              case \"vertical\":\n                return gridSize - 4;\n\n              default:\n                return \"100px\";\n            }\n          })(),\n          height: (() => {\n            switch (ships[ship].orientation) {\n              case \"horizontal\":\n                return gridSize - 4;\n\n              case \"vertical\":\n                return `${gridSize * ships[ship].size - 4}px`;\n\n              default:\n                return \"100px\";\n            }\n          })(),\n          border: \"solid 2px blue\",\n          cursor: \"grab\"\n        }\n      }, ship, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this));\n    }\n\n    return shipDivs;\n  }\n\n  function generateGridDivsAlly() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: allyGridRefs[i][j],\n          className: \"spot\",\n          style: {\n            height: `${gridSize - 2}px`,\n            width: `${gridSize - 2}px`,\n            border: \"solid 1px black\"\n          },\n          onDragStart: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n          },\n          onDragOver: e => {\n            e.preventDefault();\n            return false;\n          },\n          onDrop: e => handleDrop(e, i, j),\n          children: gridContentState[i][j]\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this));\n      });\n    });\n    return gridDivs;\n  }\n\n  function handleMouseClick(e, shipName) {\n    if (e.button !== 2) return;\n    const shipObj = ships[shipName];\n    console.dir(shipObj);\n    const shipMap = shipObj.map;\n    const shipObjRefCurrent = shipObj.reference.current;\n    let shipsCopy = Object.assign({}, ships);\n\n    if (shipObj.isPlaced) {\n      var row = shipMap[0][0];\n      var col = shipMap[0][1];\n\n      switch (shipObj.orientation) {\n        case \"vertical\":\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        case \"horizontal\":\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        default:\n          console.warn(\"wrong ship orientation in start rmb handler\");\n      }\n    }\n\n    let allNeighborsExceptCurrentShip = [];\n\n    for (const ship in ships) {\n      if (ship !== shipName) {\n        ships[ship].neighbors.forEach(neighborPair => allNeighborsExceptCurrentShip.push(neighborPair));\n      }\n    }\n\n    let newMap = [];\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row + i, col])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row + i, col]);\n        }\n\n        shipsCopy[shipName].orientation = \"vertical\";\n        break;\n\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row, col + i])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row, col + i]);\n        }\n\n        shipsCopy[shipName].orientation = \"horizontal\";\n        break;\n\n      default:\n        console.warn(\"wrong ship orientation in rmb\");\n    }\n\n    shipsCopy[shipName].map = newMap;\n    let newNeighbors = [];\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[shipName].neighbors = newNeighbors;\n    setShips(shipsCopy);\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle misplace check\");\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle, newMap loop\");\n    }\n\n    shipsCopy[currentShipName].map = newMap; // calculate new neighbors\n\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: !showField ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name...\",\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Room ID...\",\n        onChange: e => setRoomID(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinRoom,\n        children: \"Join room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Grids\",\n      style: {\n        display: \"grid\",\n        gridTemplateColumns: `repeat(2,${gridSize * 10}px)`,\n        gridTemplateRows: \"repeat(2,auto)\",\n        gap: \"50px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"AllyGrid\",\n        style: {\n          fontFamily: \"sans-serif\",\n          textAlign: \"center\",\n          display: \"grid\",\n          width: `${gridSize * 10}px`,\n          gridTemplateColumns: `repeat(10,${gridSize}px)`,\n          gridTemplateRows: `repeat(10,${gridSize}px)`\n        },\n        children: generateGridDivsAlly()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }, this), generateShipDivsAlly(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"EnemyGrid\",\n        style: {\n          display: \"grid\",\n          width: `${gridSize * 10}px`,\n          gridTemplateColumns: `repeat(10,${gridSize}px)`,\n          gridTemplateRows: `repeat(10,${gridSize}px)`\n        },\n        children: generateGridDivsEnemy()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 11\n      }, this), fieldReady || turn ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"draggablePrevention\",\n        style: {\n          position: \"absolute\",\n          width: \"300px\",\n          height: \"300px\",\n          left: \"8px\",\n          top: \"8px\",\n          opacity: \"1\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"earlyHitPrevention\",\n        style: {\n          position: \"absolute\",\n          width: \"300px\",\n          height: \"300px\",\n          left: \"358px\",\n          top: \"8px\",\n          opacity: \"1\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          position: \"absolute\",\n          right: 0\n        },\n        onClick: () => {\n          for (const shipName in ships) {\n            if (!ships[shipName].isPlaced) {\n              alert(\"not all ships placed\");\n              return;\n            }\n          }\n\n          for (const shipName in ships) {\n            ships[shipName].map.forEach(coords => {\n              grid[coords[0]][coords[1]] = 1;\n            });\n          }\n\n          alert(\"field is ready for game!\");\n          setFieldReady(true);\n          socket.emit(\"field_ready\", true);\n        },\n        children: \"Ready\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 540,\n    columnNumber: 5\n  }, this);\n} // .App {\n//   font-family: sans-serif;\n//   text-align: center;\n// }\n// .div {\n//   position: relative;\n// }\n// .div::after {\n//\n// .App {\n//   font-family: sans-serif;\n//   text-align: center;\n// }\n// .div {\n//   position: relative;\n// }\n// .div::after {\n//   position: absolute;\n//   content: \"\";\n//   width: 50px;\n//   height: 50px;\n//   background: url(\"https://memepedia.ru/wp-content/uploads/2022/01/krutye-skelety-mem-3.jpg\");\n// }\n\n_s(SeaWars, \"n+tjY6nUl52GLjWLYWTiR5QdCTI=\");\n\n_c = SeaWars;\n\nvar _c;\n\n$RefreshReg$(_c, \"SeaWars\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/client/src/App.js"],"names":["React","io","socket","connect","gridSize","grid","i","push","Array","from","enemyGridRefs","createRef","allyGridRefs","gridContent","neighborsMoves","errorHandle","shipsObjRefCurrent","style","borderColor","setTimeout","multidimensionalIncludes","multidimensionalArray","searchArray","some","row","JSON","stringify","deepListCopy","l","parse","SeaWars","username","setUsername","useState","roomID","setRoomID","gridContentState","setGridContentState","turn","setTurn","fieldReady","setFieldReady","showField","setShowField","joinRoom","emit","useEffect","on","data","prev","gridContentStateCopy","col","hit_result_data","mark","isTurn","alert","currentShipRef","useRef","grabXRef","grabYRef","ships","setShips","ship4","orientation","size","reference","position","x","y","neighbors","map","isPlaced","ship3_1","ship3_2","ship2_1","ship2_2","ship2_3","ship1_1","ship1_2","ship1_3","ship1_4","generateGridDivsEnemy","gridDivs","forEach","j","backgroundColor","height","width","border","e","preventDefault","stopPropagation","generateShipDivsAlly","shipDivs","ship","current","display","diffX","clientX","diffY","clientY","parseInt","handleMouseClick","left","top","cursor","generateGridDivsAlly","handleDrop","shipName","button","shipObj","console","dir","shipMap","shipObjRefCurrent","shipsCopy","Object","assign","warn","allNeighborsExceptCurrentShip","neighborPair","newMap","newNeighbors","coords","move","neighborsRow","neighborsCol","neighborsArray","dropRow","dropCol","currentShipName","grabX","grabY","placeX","placeY","placeCol","Math","floor","placeRow","newMapPair","target","value","gridTemplateColumns","gridTemplateRows","gap","fontFamily","textAlign","opacity","right"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport io from \"socket.io-client\";\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nconst gridSize = 30;\n\nconst grid = [];\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst enemyGridRefs = [];\nfor (let i = 0; i < 10; i++)\n  enemyGridRefs.push(Array.from(Array(10), () => React.createRef()));\n\nconst allyGridRefs = [];\nfor (let i = 0; i < 10; i++)\n  allyGridRefs.push(Array.from(Array(10), () => React.createRef()));\n\nconst gridContent = [];\nfor (let i = 0; i < 10; i++) gridContent.push(Array.from(Array(10), () => \"\"));\n\nconst neighborsMoves = [\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n];\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => (shipsObjRefCurrent.style.borderColor = \"blue\"), 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(\n    (row) => JSON.stringify(row) === JSON.stringify(searchArray)\n  );\n}\n\nfunction deepListCopy(l) {\n  return JSON.parse(JSON.stringify(l));\n}\n\nexport default function SeaWars() {\n  const [username, setUsername] = React.useState(\"\");\n  const [roomID, setRoomID] = React.useState(\"\");\n  const [gridContentState, setGridContentState] = React.useState(gridContent);\n  const [turn, setTurn] = React.useState(false);\n\n  const [fieldReady, setFieldReady] = React.useState(false);\n  const [showField, setShowField] = React.useState(false);\n\n  function joinRoom() {\n    if (username && roomID) {\n      socket.emit(\"join_room\", roomID);\n    }\n  }\n\n  React.useEffect(() => {\n    socket.on(\"hit_back\", (data) => {\n      setGridContentState((prev) => {\n        const gridContentStateCopy = deepListCopy(prev);\n        if (grid[data.row][data.col]) {\n          gridContentStateCopy[data.row][data.col] = \"x\";\n          const hit_result_data = { row: data.row, col: data.row, mark: \"x\" };\n          socket.emit(\"hit_result\", hit_result_data);\n          // allyGridRefs[data.row][data.col].current.class = \"spotcross\";\n          // allyGridRefs[data.row][data.col].current.className = \"spotcross\";\n        } else {\n          const hit_result_data = { row: data.row, col: data.row, mark: \"x\" };\n          socket.emit(\"hit_result\", hit_result_data);\n          gridContentStateCopy[data.row][data.col] = \"o\";\n          // allyGridRefs[data.row][data.col].current.class = \"spotdot\";\n          // allyGridRefs[data.row][data.col].current.className = \"spotdot\";\n        }\n        return gridContentStateCopy;\n      });\n    });\n    socket.on(\"hit_result_back\", (data) => {\n      setGridContentState((prev) => {\n        const gridContentStateCopy = deepListCopy(prev);\n        gridContentStateCopy[data.row][data.col] = data.mark;\n        socket.emit(\"change_turn\", true);\n        return gridContentStateCopy;\n      });\n    });\n    socket.on(\"change_turn_back\", (isTurn) => {\n      turn = isTurn;\n    });\n    socket.on(\"success_join\", (data) => {\n      setShowField(true);\n    });\n    socket.on(\"failed_join\", (data) => {\n      alert(\"failed to join, room is full\");\n    });\n  }, [socket]);\n\n  const currentShipRef = React.useRef();\n  const grabXRef = React.useRef();\n  const grabYRef = React.useRef();\n\n  const [ships, setShips] = React.useState({\n    ship4: {\n      orientation: \"horizontal\",\n      size: 4,\n      reference: React.useRef(),\n      position: { x: 10, y: 320 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship3_1: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: { x: 140, y: 320 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship3_2: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: { x: 140, y: 420 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship2_1: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: { x: 240, y: 320 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship2_2: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: { x: 240, y: 390 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship2_3: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: { x: 240, y: 460 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship1_1: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: { x: 10, y: 450 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship1_2: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: { x: 50, y: 450 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship1_3: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: { x: 90, y: 450 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n    ship1_4: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: { x: 10, y: 490 },\n      neighbors: [],\n      map: [],\n      isPlaced: false,\n    },\n  });\n\n  function generateGridDivsEnemy() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push(\n          <div\n            ref={enemyGridRefs[i][j]}\n            className=\"spot\"\n            style={{\n              backgroundColor: \"white\",\n              height: `${gridSize - 2}px`,\n              width: `${gridSize - 2}px`,\n              border: \"solid 1px black\",\n            }}\n            onDragStart={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              return false;\n            }}\n            onClick={async () => {\n              turn = false;\n              const data = {\n                roomID,\n                row: i,\n                col: j,\n              };\n              await socket.emit(\"hit\", data);\n            }}\n            key={`${i}-${j}`}\n          ></div>\n        );\n      });\n    });\n    return gridDivs;\n  }\n\n  function generateShipDivsAlly() {\n    const shipDivs = [];\n    for (const ship in ships) {\n      shipDivs.push(\n        <div\n          ref={ships[ship].reference}\n          key={ship}\n          draggable\n          onDragEnd={(e) =>\n            (ships[ship].reference.current.style.display = \"inline\")\n          }\n          onDragStart={(e) => {\n            setTimeout(\n              () => (ships[ship].reference.current.style.display = \"none\")\n            );\n            currentShipRef.current = ship;\n            const diffX = e.clientX - ships[ship].position.x;\n            const diffY = e.clientY - ships[ship].position.y;\n            grabXRef.current = parseInt(diffX / gridSize);\n            grabYRef.current = parseInt(diffY / gridSize);\n          }}\n          onMouseUp={(e) => setTimeout(handleMouseClick, 0, e, ship)}\n          onContextMenu={(e) => e.preventDefault()}\n          style={{\n            position: \"absolute\",\n            left: ships[ship].position.x,\n            top: ships[ship].position.y,\n            width: (() => {\n              switch (ships[ship].orientation) {\n                case \"horizontal\":\n                  return `${gridSize * ships[ship].size - 4}px`;\n                case \"vertical\":\n                  return gridSize - 4;\n                default:\n                  return \"100px\";\n              }\n            })(),\n            height: (() => {\n              switch (ships[ship].orientation) {\n                case \"horizontal\":\n                  return gridSize - 4;\n                case \"vertical\":\n                  return `${gridSize * ships[ship].size - 4}px`;\n                default:\n                  return \"100px\";\n              }\n            })(),\n            border: \"solid 2px blue\",\n            cursor: \"grab\",\n          }}\n        ></div>\n      );\n    }\n    return shipDivs;\n  }\n\n  function generateGridDivsAlly() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push(\n          <div\n            ref={allyGridRefs[i][j]}\n            className=\"spot\"\n            style={{\n              height: `${gridSize - 2}px`,\n              width: `${gridSize - 2}px`,\n              border: \"solid 1px black\",\n            }}\n            key={`${i}-${j}`}\n            onDragStart={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              return false;\n            }}\n            onDragOver={(e) => {\n              e.preventDefault();\n              return false;\n            }}\n            onDrop={(e) => handleDrop(e, i, j)}\n          >\n            {gridContentState[i][j]}\n          </div>\n        );\n      });\n    });\n    return gridDivs;\n  }\n\n  function handleMouseClick(e, shipName) {\n    if (e.button !== 2) return;\n\n    const shipObj = ships[shipName];\n    console.dir(shipObj);\n    const shipMap = shipObj.map;\n    const shipObjRefCurrent = shipObj.reference.current;\n\n    let shipsCopy = Object.assign({}, ships);\n\n    if (shipObj.isPlaced) {\n      var row = shipMap[0][0];\n      var col = shipMap[0][1];\n\n      switch (shipObj.orientation) {\n        case \"vertical\":\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n        case \"horizontal\":\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n        default:\n          console.warn(\"wrong ship orientation in start rmb handler\");\n      }\n    }\n\n    let allNeighborsExceptCurrentShip = [];\n    for (const ship in ships) {\n      if (ship !== shipName) {\n        ships[ship].neighbors.forEach((neighborPair) =>\n          allNeighborsExceptCurrentShip.push(neighborPair)\n        );\n      }\n    }\n\n    let newMap = [];\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\n              row + i,\n              col,\n            ])\n          )\n            return errorHandle(shipObjRefCurrent);\n          newMap.push([row + i, col]);\n        }\n\n        shipsCopy[shipName].orientation = \"vertical\";\n        break;\n\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\n              row,\n              col + i,\n            ])\n          )\n            return errorHandle(shipObjRefCurrent);\n          newMap.push([row, col + i]);\n        }\n\n        shipsCopy[shipName].orientation = \"horizontal\";\n        break;\n\n      default:\n        console.warn(\"wrong ship orientation in rmb\");\n    }\n\n    shipsCopy[shipName].map = newMap;\n\n    let newNeighbors = [];\n\n    newMap.forEach((coords) => {\n      neighborsMoves.forEach((move) => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (\n          neighborsRow >= 0 &&\n          neighborsRow <= 9 &&\n          neighborsCol >= 0 &&\n          neighborsCol <= 9\n        )\n          if (\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\n            !multidimensionalIncludes(newMap, neighborsArray)\n          )\n            newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[shipName].neighbors = newNeighbors;\n\n    setShips(shipsCopy);\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0)\n          return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0)\n          return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\n          \"ship have wrong orientation in dropHandle misplace check\"\n        );\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (\n                multidimensionalIncludes(\n                  shipsCopy[shipName].neighbors,\n                  newMapPair\n                )\n              )\n                return errorHandle(shipsObjRefCurrent);\n            }\n          }\n          newMap.push(newMapPair);\n        }\n        break;\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (\n                multidimensionalIncludes(\n                  shipsCopy[shipName].neighbors,\n                  newMapPair\n                )\n              )\n                return errorHandle(shipsObjRefCurrent);\n            }\n          }\n          newMap.push(newMapPair);\n        }\n        break;\n      default:\n        return console.warn(\n          \"ship have wrong orientation in dropHandle, newMap loop\"\n        );\n    }\n    shipsCopy[currentShipName].map = newMap;\n\n    // calculate new neighbors\n    newMap.forEach((coords) => {\n      neighborsMoves.forEach((move) => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (\n          neighborsRow >= 0 &&\n          neighborsRow <= 9 &&\n          neighborsCol >= 0 &&\n          neighborsCol <= 9\n        )\n          if (\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\n            !multidimensionalIncludes(newMap, neighborsArray)\n          )\n            newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n\n    return false;\n  }\n\n  return (\n    <div className=\"App\">\n      {!showField ? (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Name...\"\n            onChange={(e) => setUsername(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            onChange={(e) => setRoomID(e.target.value)}\n          />\n          <button onClick={joinRoom}>Join room</button>\n        </>\n      ) : (\n        <div\n          className=\"Grids\"\n          style={{\n            display: \"grid\",\n            gridTemplateColumns: `repeat(2,${gridSize * 10}px)`,\n            gridTemplateRows: \"repeat(2,auto)\",\n            gap: \"50px\",\n          }}\n        >\n          <div\n            className=\"AllyGrid\"\n            style={{\n              fontFamily: \"sans-serif\",\n              textAlign: \"center\",\n              display: \"grid\",\n              width: `${gridSize * 10}px`,\n              gridTemplateColumns: `repeat(10,${gridSize}px)`,\n              gridTemplateRows: `repeat(10,${gridSize}px)`,\n            }}\n          >\n            {generateGridDivsAlly()}\n          </div>\n          {generateShipDivsAlly()}\n          <div\n            className=\"EnemyGrid\"\n            style={{\n              display: \"grid\",\n              width: `${gridSize * 10}px`,\n              gridTemplateColumns: `repeat(10,${gridSize}px)`,\n              gridTemplateRows: `repeat(10,${gridSize}px)`,\n            }}\n          >\n            {generateGridDivsEnemy()}\n          </div>\n          {fieldReady || turn ? (\n            <div\n              className=\"draggablePrevention\"\n              style={{\n                position: \"absolute\",\n                width: \"300px\",\n                height: \"300px\",\n                left: \"8px\",\n                top: \"8px\",\n                opacity: \"1\",\n              }}\n            ></div>\n          ) : (\n            <div\n              className=\"earlyHitPrevention\"\n              style={{\n                position: \"absolute\",\n                width: \"300px\",\n                height: \"300px\",\n                left: \"358px\",\n                top: \"8px\",\n                opacity: \"1\",\n              }}\n            ></div>\n          )}\n          <button\n            style={{ position: \"absolute\", right: 0 }}\n            onClick={() => {\n              for (const shipName in ships) {\n                if (!ships[shipName].isPlaced) {\n                  alert(\"not all ships placed\");\n                  return;\n                }\n              }\n              for (const shipName in ships) {\n                ships[shipName].map.forEach((coords) => {\n                  grid[coords[0]][coords[1]] = 1;\n                });\n              }\n              alert(\"field is ready for game!\");\n              setFieldReady(true);\n              socket.emit(\"field_ready\", true);\n            }}\n          >\n            Ready\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// .App {\n//   font-family: sans-serif;\n//   text-align: center;\n// }\n\n// .div {\n//   position: relative;\n// }\n\n// .div::after {\n//\n// .App {\n//   font-family: sans-serif;\n//   text-align: center;\n// }\n\n// .div {\n//   position: relative;\n// }\n\n// .div::after {\n//   position: absolute;\n//   content: \"\";\n//   width: 50px;\n//   height: 50px;\n//   background: url(\"https://memepedia.ru/wp-content/uploads/2022/01/krutye-skelety-mem-3.jpg\");\n// }\n"]},"metadata":{},"sourceType":"module"}