{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\src\\\\components\\\\Grid.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet grid = [];\n\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst neighborsMoves = [[0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1]];\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => shipsObjRefCurrent.style.borderColor = \"blue\", 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(row => JSON.stringify(row) === JSON.stringify(searchArray));\n}\n\nexport default function Grid(gridSize) {\n  function handleMouseClick(e, shipName) {\n    if (e.button !== 2) return;\n    const shipObj = ships[shipName];\n    console.dir(shipObj);\n    const shipMap = shipObj.map;\n    const shipObjRefCurrent = shipObj.reference.current;\n    let shipsCopy = Object.assign({}, ships);\n\n    if (shipObj.isPlaced) {\n      var row = shipMap[0][0];\n      var col = shipMap[0][1];\n\n      switch (shipObj.orientation) {\n        case \"vertical\":\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        case \"horizontal\":\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        default:\n          console.warn(\"wrong ship orientation in start rmb handler\");\n      }\n    }\n\n    let allNeighborsExceptCurrentShip = [];\n\n    for (const ship in ships) {\n      if (ship !== shipName) {\n        ships[ship].neighbors.forEach(neighborPair => allNeighborsExceptCurrentShip.push(neighborPair));\n      }\n    }\n\n    let newMap = [];\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row + i, col])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row + i, col]);\n        }\n\n        shipsCopy[shipName].orientation = \"vertical\";\n        break;\n\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row, col + i])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row, col + i]);\n        }\n\n        shipsCopy[shipName].orientation = \"horizontal\";\n        break;\n\n      default:\n        console.warn(\"wrong ship orientation in rmb\");\n    }\n\n    shipsCopy[shipName].map = newMap;\n    let newNeighbors = [];\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[shipName].neighbors = newNeighbors;\n    setShips(shipsCopy);\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle misplace check\");\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle, newMap loop\");\n    }\n\n    shipsCopy[currentShipName].map = newMap; // calculate new neighbors\n\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"GridContainer\",\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(10,20px)\"\n    },\n    children: grid.map((row, i) => row.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spot\",\n      onDragStart: e => e.preventDefault(),\n      onDragOver: e => {\n        e.preventDefault();\n        return false;\n      },\n      onDrop: e => handleDrop(e, i, j),\n      style: {\n        backgroundColor: \"white\",\n        height: \"18px\",\n        width: \"18px\",\n        border: \"solid 1px black\"\n      }\n    }, `${i}-${j}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n}\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/src/components/Grid.js"],"names":["grid","i","push","Array","from","neighborsMoves","errorHandle","shipsObjRefCurrent","style","borderColor","setTimeout","multidimensionalIncludes","multidimensionalArray","searchArray","some","row","JSON","stringify","Grid","gridSize","handleMouseClick","e","shipName","button","shipObj","ships","console","dir","shipMap","map","shipObjRefCurrent","reference","current","shipsCopy","Object","assign","isPlaced","col","orientation","size","warn","allNeighborsExceptCurrentShip","ship","neighbors","forEach","neighborPair","newMap","newNeighbors","coords","move","neighborsRow","neighborsCol","neighborsArray","setShips","handleDrop","dropRow","dropCol","stopPropagation","preventDefault","currentShipName","currentShipRef","grabX","grabXRef","grabY","grabYRef","placeX","placeY","placeCol","Math","floor","placeRow","newMapPair","position","x","y","display","gridTemplateColumns","j","backgroundColor","height","width","border"],"mappings":"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","sourcesContent":["let grid = [];\r\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\r\nconst neighborsMoves = [\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [1, -1],\r\n];\r\n\r\nfunction errorHandle(shipsObjRefCurrent) {\r\n  shipsObjRefCurrent.style.borderColor = \"red\";\r\n  setTimeout(() => (shipsObjRefCurrent.style.borderColor = \"blue\"), 500);\r\n  return false;\r\n}\r\n\r\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\r\n  return multidimensionalArray.some(\r\n    (row) => JSON.stringify(row) === JSON.stringify(searchArray)\r\n  );\r\n}\r\nexport default function Grid(gridSize) {\r\n  function handleMouseClick(e, shipName) {\r\n    if (e.button !== 2) return;\r\n\r\n    const shipObj = ships[shipName];\r\n    console.dir(shipObj);\r\n    const shipMap = shipObj.map;\r\n    const shipObjRefCurrent = shipObj.reference.current;\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    if (shipObj.isPlaced) {\r\n      var row = shipMap[0][0];\r\n      var col = shipMap[0][1];\r\n\r\n      switch (shipObj.orientation) {\r\n        case \"vertical\":\r\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\r\n          break;\r\n        case \"horizontal\":\r\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\r\n          break;\r\n        default:\r\n          console.warn(\"wrong ship orientation in start rmb handler\");\r\n      }\r\n    }\r\n\r\n    let allNeighborsExceptCurrentShip = [];\r\n    for (const ship in ships) {\r\n      if (ship !== shipName) {\r\n        ships[ship].neighbors.forEach((neighborPair) =>\r\n          allNeighborsExceptCurrentShip.push(neighborPair)\r\n        );\r\n      }\r\n    }\r\n\r\n    let newMap = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          if (\r\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\r\n              row + i,\r\n              col,\r\n            ])\r\n          )\r\n            return errorHandle(shipObjRefCurrent);\r\n          newMap.push([row + i, col]);\r\n        }\r\n\r\n        shipsCopy[shipName].orientation = \"vertical\";\r\n        break;\r\n\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          if (\r\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\r\n              row,\r\n              col + i,\r\n            ])\r\n          )\r\n            return errorHandle(shipObjRefCurrent);\r\n          newMap.push([row, col + i]);\r\n        }\r\n\r\n        shipsCopy[shipName].orientation = \"horizontal\";\r\n        break;\r\n\r\n      default:\r\n        console.warn(\"wrong ship orientation in rmb\");\r\n    }\r\n\r\n    shipsCopy[shipName].map = newMap;\r\n\r\n    let newNeighbors = [];\r\n\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[shipName].neighbors = newNeighbors;\r\n\r\n    setShips(shipsCopy);\r\n  }\r\n  function handleDrop(e, dropRow, dropCol) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const currentShipName = currentShipRef.current;\r\n    const shipObj = ships[currentShipName];\r\n    const shipsObjRefCurrent = shipObj.reference.current;\r\n\r\n    const grabX = grabXRef.current;\r\n    const grabY = grabYRef.current;\r\n\r\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\r\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\r\n\r\n    const placeCol = Math.floor(placeX / gridSize);\r\n    const placeRow = Math.floor(placeY / gridSize);\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        if (placeCol > 10 - shipObj.size || placeCol < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      case \"vertical\":\r\n        if (placeRow > 10 - shipObj.size || placeRow < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle misplace check\"\r\n        );\r\n    }\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    let newMap = [];\r\n    let newNeighbors = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow + i;\r\n          const col = placeCol;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow;\r\n          const col = placeCol + i;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle, newMap loop\"\r\n        );\r\n    }\r\n    shipsCopy[currentShipName].map = newMap;\r\n\r\n    // calculate new neighbors\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[currentShipName].neighbors = newNeighbors;\r\n\r\n    shipsCopy[currentShipName].position.x = placeX;\r\n    shipsCopy[currentShipName].position.y = placeY;\r\n\r\n    shipsCopy[currentShipName].isPlaced = true;\r\n    setShips(shipsCopy);\r\n\r\n    return false;\r\n  }\r\n  return (\r\n    <div\r\n      className=\"GridContainer\"\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(10,20px)\",\r\n      }}\r\n    >\r\n      {grid.map((row, i) =>\r\n        row.map((col, j) => (\r\n          <div\r\n            className=\"spot\"\r\n            key={`${i}-${j}`}\r\n            onDragStart={(e) => e.preventDefault()}\r\n            onDragOver={(e) => {\r\n              e.preventDefault();\r\n              return false;\r\n            }}\r\n            onDrop={(e) => handleDrop(e, i, j)}\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              height: \"18px\",\r\n              width: \"18px\",\r\n              border: \"solid 1px black\",\r\n            }}\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}