{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\src\\\\components\\\\Grid.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet grid = [];\n\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nexport default function Grid(gridSize) {\n  const neighborsMoves = [[0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1]];\n\n  function errorHandle(shipsObjRefCurrent) {\n    shipsObjRefCurrent.style.borderColor = \"red\";\n    setTimeout(() => shipsObjRefCurrent.style.borderColor = \"blue\", 500);\n    return false;\n  }\n\n  function multidimensionalIncludes(multidimensionalArray, searchArray) {\n    return multidimensionalArray.some(row => JSON.stringify(row) === JSON.stringify(searchArray));\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle misplace check\");\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle, newMap loop\");\n    }\n\n    shipsCopy[currentShipName].map = newMap; // calculate new neighbors\n\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"GridContainer\",\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(10,20px)\"\n    },\n    children: grid.map((row, i) => row.map((col, j) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spot\",\n      onDragStart: e => e.preventDefault(),\n      onDragOver: e => {\n        e.preventDefault();\n        return false;\n      },\n      onDrop: e => handleDrop(e, i, j),\n      style: {\n        backgroundColor: \"white\",\n        height: \"18px\",\n        width: \"18px\",\n        border: \"solid 1px black\"\n      }\n    }, `${i}-${j}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n_c = Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/src/components/Grid.js"],"names":["grid","i","push","Array","from","Grid","gridSize","neighborsMoves","errorHandle","shipsObjRefCurrent","style","borderColor","setTimeout","multidimensionalIncludes","multidimensionalArray","searchArray","some","row","JSON","stringify","handleDrop","e","dropRow","dropCol","stopPropagation","preventDefault","currentShipName","currentShipRef","current","shipObj","ships","reference","grabX","grabXRef","grabY","grabYRef","placeX","placeY","placeCol","Math","floor","placeRow","orientation","size","console","warn","shipsCopy","Object","assign","newMap","newNeighbors","col","newMapPair","shipName","neighbors","map","forEach","coords","move","neighborsRow","neighborsCol","neighborsArray","position","x","y","isPlaced","setShips","display","gridTemplateColumns","j","backgroundColor","height","width","border"],"mappings":"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","sourcesContent":["let grid = [];\r\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\r\n\r\nexport default function Grid(gridSize) {\r\n    const neighborsMoves = [\r\n        [0, -1],\r\n        [-1, -1],\r\n        [-1, 0],\r\n        [-1, 1],\r\n        [0, 1],\r\n        [1, 1],\r\n        [1, 0],\r\n        [1, -1],\r\n      ];\r\n      \r\n      function errorHandle(shipsObjRefCurrent) {\r\n        shipsObjRefCurrent.style.borderColor = \"red\";\r\n        setTimeout(() => (shipsObjRefCurrent.style.borderColor = \"blue\"), 500);\r\n        return false;\r\n      }\r\n      \r\n      function multidimensionalIncludes(multidimensionalArray, searchArray) {\r\n        return multidimensionalArray.some(\r\n          (row) => JSON.stringify(row) === JSON.stringify(searchArray)\r\n        );\r\n      }\r\n  function handleDrop(e, dropRow, dropCol) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const currentShipName = currentShipRef.current;\r\n    const shipObj = ships[currentShipName];\r\n    const shipsObjRefCurrent = shipObj.reference.current;\r\n\r\n    const grabX = grabXRef.current;\r\n    const grabY = grabYRef.current;\r\n\r\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\r\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\r\n\r\n    const placeCol = Math.floor(placeX / gridSize);\r\n    const placeRow = Math.floor(placeY / gridSize);\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        if (placeCol > 10 - shipObj.size || placeCol < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      case \"vertical\":\r\n        if (placeRow > 10 - shipObj.size || placeRow < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle misplace check\"\r\n        );\r\n    }\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    let newMap = [];\r\n    let newNeighbors = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow + i;\r\n          const col = placeCol;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow;\r\n          const col = placeCol + i;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle, newMap loop\"\r\n        );\r\n    }\r\n    shipsCopy[currentShipName].map = newMap;\r\n\r\n    // calculate new neighbors\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[currentShipName].neighbors = newNeighbors;\r\n\r\n    shipsCopy[currentShipName].position.x = placeX;\r\n    shipsCopy[currentShipName].position.y = placeY;\r\n\r\n    shipsCopy[currentShipName].isPlaced = true;\r\n    setShips(shipsCopy);\r\n\r\n    return false;\r\n  }\r\n  return (\r\n    <div\r\n      className=\"GridContainer\"\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(10,20px)\",\r\n      }}\r\n    >\r\n      {grid.map((row, i) =>\r\n        row.map((col, j) => (\r\n          <div\r\n            className=\"spot\"\r\n            key={`${i}-${j}`}\r\n            onDragStart={(e) => e.preventDefault()}\r\n            onDragOver={(e) => {\r\n              e.preventDefault();\r\n              return false;\r\n            }}\r\n            onDrop={(e) => handleDrop(e, i, j)}\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              height: \"18px\",\r\n              width: \"18px\",\r\n              border: \"solid 1px black\",\r\n            }}\r\n          />\r\n        ))\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}