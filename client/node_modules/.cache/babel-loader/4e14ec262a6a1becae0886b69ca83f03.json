{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\win\\\\Desktop\\\\seawars-react\\\\src\\\\components\\\\AllyGrid.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst grid = [];\n\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\n\nconst neighborsMoves = [[0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1]];\n\nfunction errorHandle(shipsObjRefCurrent) {\n  shipsObjRefCurrent.style.borderColor = \"red\";\n  setTimeout(() => shipsObjRefCurrent.style.borderColor = \"blue\", 500);\n  return false;\n}\n\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\n  return multidimensionalArray.some(row => JSON.stringify(row) === JSON.stringify(searchArray));\n}\n\nexport default function AllyGrid(props) {\n  _s();\n\n  const gridSize = props.gridSize;\n  const currentShipRef = React.useRef();\n  const grabXRef = React.useRef();\n  const grabYRef = React.useRef();\n  const [ships, setShips] = React.useState({\n    ship4: {\n      orientation: \"horizontal\",\n      size: 4,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship3_1: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: {\n        x: 140,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship3_2: {\n      orientation: \"horizontal\",\n      size: 3,\n      reference: React.useRef(),\n      position: {\n        x: 140,\n        y: 400\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_1: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 320\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_2: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 360\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship2_3: {\n      orientation: \"horizontal\",\n      size: 2,\n      reference: React.useRef(),\n      position: {\n        x: 240,\n        y: 400\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_1: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 360\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_2: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 50,\n        y: 360\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_3: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 90,\n        y: 360\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    },\n    ship1_4: {\n      orientation: \"horizontal\",\n      size: 1,\n      reference: React.useRef(),\n      position: {\n        x: 10,\n        y: 300\n      },\n      neighbors: [],\n      map: [],\n      isPlaced: false\n    }\n  });\n\n  function generateShipDivs() {\n    const shipDivs = [];\n\n    for (const ship in ships) {\n      shipDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ships[ship].reference,\n        draggable: true,\n        onDragEnd: e => ships[ship].reference.current.style.display = \"inline\",\n        onDragStart: e => {\n          setTimeout(() => ships[ship].reference.current.style.display = \"none\");\n          currentShipRef.current = ship;\n          const diffX = e.clientX - ships[ship].position.x;\n          const diffY = e.clientY - ships[ship].position.y;\n          grabXRef.current = parseInt(diffX / gridSize);\n          grabYRef.current = parseInt(diffY / gridSize);\n        },\n        onMouseUp: e => setTimeout(handleMouseClick, 0, e, ship),\n        onContextMenu: e => e.preventDefault(),\n        style: {\n          position: \"absolute\",\n          left: ships[ship].position.x,\n          top: ships[ship].position.y,\n          width: (() => {\n            switch (ships[ship].orientation) {\n              case \"horizontal\":\n                return `${gridSize * ships[ship].size - 4}px`;\n\n              case \"vertical\":\n                return gridSize - 4;\n\n              default:\n                return \"100px\";\n            }\n          })(),\n          height: (() => {\n            switch (ships[ship].orientation) {\n              case \"horizontal\":\n                return gridSize - 4;\n\n              case \"vertical\":\n                return `${gridSize * ships[ship].size - 4}px`;\n\n              default:\n                return \"100px\";\n            }\n          })(),\n          border: \"solid 2px blue\",\n          cursor: \"grab\"\n        }\n      }, ship, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this));\n    }\n\n    return shipDivs;\n  }\n\n  function generateGridDivs() {\n    const gridDivs = [];\n    grid.forEach((row, i) => {\n      row.forEach((col, j) => {\n        gridDivs.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spot\",\n          style: {\n            backgroundColor: \"white\",\n            height: `${gridSize - 2}px`,\n            width: `${gridSize - 2}px`,\n            border: \"solid 1px black\"\n          },\n          onDragStart: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            return false;\n          },\n          onDragOver: e => {\n            e.preventDefault();\n            return false;\n          },\n          onDrop: e => handleDrop(e, i, j)\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this));\n      });\n    });\n    return gridDivs;\n  }\n\n  function handleMouseClick(e, shipName) {\n    if (e.button !== 2) return;\n    const shipObj = ships[shipName];\n    console.dir(shipObj);\n    const shipMap = shipObj.map;\n    const shipObjRefCurrent = shipObj.reference.current;\n    let shipsCopy = Object.assign({}, ships);\n\n    if (shipObj.isPlaced) {\n      var row = shipMap[0][0];\n      var col = shipMap[0][1];\n\n      switch (shipObj.orientation) {\n        case \"vertical\":\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        case \"horizontal\":\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\n          break;\n\n        default:\n          console.warn(\"wrong ship orientation in start rmb handler\");\n      }\n    }\n\n    let allNeighborsExceptCurrentShip = [];\n\n    for (const ship in ships) {\n      if (ship !== shipName) {\n        ships[ship].neighbors.forEach(neighborPair => allNeighborsExceptCurrentShip.push(neighborPair));\n      }\n    }\n\n    let newMap = [];\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row + i, col])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row + i, col]);\n        }\n\n        shipsCopy[shipName].orientation = \"vertical\";\n        break;\n\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          if (multidimensionalIncludes(allNeighborsExceptCurrentShip, [row, col + i])) return errorHandle(shipObjRefCurrent);\n          newMap.push([row, col + i]);\n        }\n\n        shipsCopy[shipName].orientation = \"horizontal\";\n        break;\n\n      default:\n        console.warn(\"wrong ship orientation in rmb\");\n    }\n\n    shipsCopy[shipName].map = newMap;\n    let newNeighbors = [];\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[shipName].neighbors = newNeighbors;\n    setShips(shipsCopy);\n  }\n\n  function handleDrop(e, dropRow, dropCol) {\n    e.stopPropagation();\n    e.preventDefault();\n    const currentShipName = currentShipRef.current;\n    const shipObj = ships[currentShipName];\n    const shipsObjRefCurrent = shipObj.reference.current;\n    const grabX = grabXRef.current;\n    const grabY = grabYRef.current;\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\n    const placeCol = Math.floor(placeX / gridSize);\n    const placeRow = Math.floor(placeY / gridSize);\n\n    switch (shipObj.orientation) {\n      case \"horizontal\":\n        if (placeCol > 10 - shipObj.size || placeCol < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      case \"vertical\":\n        if (placeRow > 10 - shipObj.size || placeRow < 0) return errorHandle(shipsObjRefCurrent);\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle misplace check\");\n    }\n\n    let shipsCopy = Object.assign({}, ships);\n    let newMap = [];\n    let newNeighbors = [];\n\n    switch (shipObj.orientation) {\n      case \"vertical\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow + i;\n          const col = placeCol;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      case \"horizontal\":\n        for (let i = 0; i < shipObj.size; i++) {\n          const row = placeRow;\n          const col = placeCol + i;\n          const newMapPair = [row, col];\n\n          for (const shipName in ships) {\n            if (shipName !== currentShipName) {\n              if (multidimensionalIncludes(shipsCopy[shipName].neighbors, newMapPair)) return errorHandle(shipsObjRefCurrent);\n            }\n          }\n\n          newMap.push(newMapPair);\n        }\n\n        break;\n\n      default:\n        return console.warn(\"ship have wrong orientation in dropHandle, newMap loop\");\n    }\n\n    shipsCopy[currentShipName].map = newMap; // calculate new neighbors\n\n    newMap.forEach(coords => {\n      neighborsMoves.forEach(move => {\n        const neighborsRow = coords[0] + move[0];\n        const neighborsCol = coords[1] + move[1];\n        const neighborsArray = [neighborsRow, neighborsCol];\n        if (neighborsRow >= 0 && neighborsRow <= 9 && neighborsCol >= 0 && neighborsCol <= 9) if (!multidimensionalIncludes(newNeighbors, neighborsArray) && !multidimensionalIncludes(newMap, neighborsArray)) newNeighbors.push(neighborsArray);\n      });\n    });\n    shipsCopy[currentShipName].neighbors = newNeighbors;\n    shipsCopy[currentShipName].position.x = placeX;\n    shipsCopy[currentShipName].position.y = placeY;\n    shipsCopy[currentShipName].isPlaced = true;\n    setShips(shipsCopy);\n    return false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AllyGrid\",\n      style: {\n        display: \"grid\",\n        width: `${gridSize * 10}px`,\n        gridTemplateColumns: `repeat(10,${gridSize}px)`,\n        gridTemplateRows: `repeat(10,${gridSize}px)`\n      },\n      children: generateGridDivs()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), generateShipDivs()]\n  }, void 0, true);\n}\n\n_s(AllyGrid, \"hyvCVq8eo1qjbxusEEzCAN48hNk=\");\n\n_c = AllyGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllyGrid\");","map":{"version":3,"sources":["C:/Users/win/Desktop/seawars-react/src/components/AllyGrid.js"],"names":["React","grid","i","push","Array","from","neighborsMoves","errorHandle","shipsObjRefCurrent","style","borderColor","setTimeout","multidimensionalIncludes","multidimensionalArray","searchArray","some","row","JSON","stringify","AllyGrid","props","gridSize","currentShipRef","useRef","grabXRef","grabYRef","ships","setShips","useState","ship4","orientation","size","reference","position","x","y","neighbors","map","isPlaced","ship3_1","ship3_2","ship2_1","ship2_2","ship2_3","ship1_1","ship1_2","ship1_3","ship1_4","generateShipDivs","shipDivs","ship","e","current","display","diffX","clientX","diffY","clientY","parseInt","handleMouseClick","preventDefault","left","top","width","height","border","cursor","generateGridDivs","gridDivs","forEach","col","j","backgroundColor","stopPropagation","handleDrop","shipName","button","shipObj","console","dir","shipMap","shipObjRefCurrent","shipsCopy","Object","assign","warn","allNeighborsExceptCurrentShip","neighborPair","newMap","newNeighbors","coords","move","neighborsRow","neighborsCol","neighborsArray","dropRow","dropCol","currentShipName","grabX","grabY","placeX","placeY","placeCol","Math","floor","placeRow","newMapPair","gridTemplateColumns","gridTemplateRows"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst grid = [];\r\nfor (let i = 0; i < 10; i++) grid.push(Array.from(Array(10), () => 0));\r\n\r\nconst neighborsMoves = [\r\n  [0, -1],\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n  [0, 1],\r\n  [1, 1],\r\n  [1, 0],\r\n  [1, -1],\r\n];\r\n\r\nfunction errorHandle(shipsObjRefCurrent) {\r\n  shipsObjRefCurrent.style.borderColor = \"red\";\r\n  setTimeout(() => (shipsObjRefCurrent.style.borderColor = \"blue\"), 500);\r\n  return false;\r\n}\r\n\r\nfunction multidimensionalIncludes(multidimensionalArray, searchArray) {\r\n  return multidimensionalArray.some(\r\n    (row) => JSON.stringify(row) === JSON.stringify(searchArray)\r\n  );\r\n}\r\n\r\nexport default function AllyGrid(props) {\r\n  const gridSize = props.gridSize;\r\n\r\n  const currentShipRef = React.useRef();\r\n  const grabXRef = React.useRef();\r\n  const grabYRef = React.useRef();\r\n\r\n  const [ships, setShips] = React.useState({\r\n    ship4: {\r\n      orientation: \"horizontal\",\r\n      size: 4,\r\n      reference: React.useRef(),\r\n      position: { x: 10, y: 320 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship3_1: {\r\n      orientation: \"horizontal\",\r\n      size: 3,\r\n      reference: React.useRef(),\r\n      position: { x: 140, y: 320 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship3_2: {\r\n      orientation: \"horizontal\",\r\n      size: 3,\r\n      reference: React.useRef(),\r\n      position: { x: 140, y: 400 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship2_1: {\r\n      orientation: \"horizontal\",\r\n      size: 2,\r\n      reference: React.useRef(),\r\n      position: { x: 240, y: 320 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship2_2: {\r\n      orientation: \"horizontal\",\r\n      size: 2,\r\n      reference: React.useRef(),\r\n      position: { x: 240, y: 360 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship2_3: {\r\n      orientation: \"horizontal\",\r\n      size: 2,\r\n      reference: React.useRef(),\r\n      position: { x: 240, y: 400 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship1_1: {\r\n      orientation: \"horizontal\",\r\n      size: 1,\r\n      reference: React.useRef(),\r\n      position: { x: 10, y: 360 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship1_2: {\r\n      orientation: \"horizontal\",\r\n      size: 1,\r\n      reference: React.useRef(),\r\n      position: { x: 50, y: 360 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship1_3: {\r\n      orientation: \"horizontal\",\r\n      size: 1,\r\n      reference: React.useRef(),\r\n      position: { x: 90, y: 360 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n    ship1_4: {\r\n      orientation: \"horizontal\",\r\n      size: 1,\r\n      reference: React.useRef(),\r\n      position: { x: 10, y: 300 },\r\n      neighbors: [],\r\n      map: [],\r\n      isPlaced: false,\r\n    },\r\n  });\r\n\r\n  function generateShipDivs() {\r\n    const shipDivs = [];\r\n    for (const ship in ships) {\r\n      shipDivs.push(\r\n        <div\r\n          ref={ships[ship].reference}\r\n          key={ship}\r\n          draggable\r\n          onDragEnd={(e) =>\r\n            (ships[ship].reference.current.style.display = \"inline\")\r\n          }\r\n          onDragStart={(e) => {\r\n            setTimeout(\r\n              () => (ships[ship].reference.current.style.display = \"none\")\r\n            );\r\n            currentShipRef.current = ship;\r\n            const diffX = e.clientX - ships[ship].position.x;\r\n            const diffY = e.clientY - ships[ship].position.y;\r\n            grabXRef.current = parseInt(diffX / gridSize);\r\n            grabYRef.current = parseInt(diffY / gridSize);\r\n          }}\r\n          onMouseUp={(e) => setTimeout(handleMouseClick, 0, e, ship)}\r\n          onContextMenu={(e) => e.preventDefault()}\r\n          style={{\r\n            position: \"absolute\",\r\n            left: ships[ship].position.x,\r\n            top: ships[ship].position.y,\r\n            width: (() => {\r\n              switch (ships[ship].orientation) {\r\n                case \"horizontal\":\r\n                  return `${gridSize * ships[ship].size - 4}px`;\r\n                case \"vertical\":\r\n                  return gridSize - 4;\r\n                default:\r\n                  return \"100px\";\r\n              }\r\n            })(),\r\n            height: (() => {\r\n              switch (ships[ship].orientation) {\r\n                case \"horizontal\":\r\n                  return gridSize - 4;\r\n                case \"vertical\":\r\n                  return `${gridSize * ships[ship].size - 4}px`;\r\n                default:\r\n                  return \"100px\";\r\n              }\r\n            })(),\r\n            border: \"solid 2px blue\",\r\n            cursor: \"grab\",\r\n          }}\r\n        ></div>\r\n      );\r\n    }\r\n    return shipDivs;\r\n  }\r\n\r\n  function generateGridDivs() {\r\n    const gridDivs = [];\r\n    grid.forEach((row, i) => {\r\n      row.forEach((col, j) => {\r\n        gridDivs.push(\r\n          <div\r\n            className=\"spot\"\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              height: `${gridSize - 2}px`,\r\n              width: `${gridSize - 2}px`,\r\n              border: \"solid 1px black\",\r\n            }}\r\n            key={`${i}-${j}`}\r\n            onDragStart={(e) => {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              return false;\r\n            }}\r\n            onDragOver={(e) => {\r\n              e.preventDefault();\r\n              return false;\r\n            }}\r\n            onDrop={(e) => handleDrop(e, i, j)}\r\n          ></div>\r\n        );\r\n      });\r\n    });\r\n    return gridDivs;\r\n  }\r\n\r\n  function handleMouseClick(e, shipName) {\r\n    if (e.button !== 2) return;\r\n\r\n    const shipObj = ships[shipName];\r\n    console.dir(shipObj);\r\n    const shipMap = shipObj.map;\r\n    const shipObjRefCurrent = shipObj.reference.current;\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    if (shipObj.isPlaced) {\r\n      var row = shipMap[0][0];\r\n      var col = shipMap[0][1];\r\n\r\n      switch (shipObj.orientation) {\r\n        case \"vertical\":\r\n          if (col > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\r\n          break;\r\n        case \"horizontal\":\r\n          if (row > 10 - shipObj.size) return errorHandle(shipObjRefCurrent);\r\n          break;\r\n        default:\r\n          console.warn(\"wrong ship orientation in start rmb handler\");\r\n      }\r\n    }\r\n\r\n    let allNeighborsExceptCurrentShip = [];\r\n    for (const ship in ships) {\r\n      if (ship !== shipName) {\r\n        ships[ship].neighbors.forEach((neighborPair) =>\r\n          allNeighborsExceptCurrentShip.push(neighborPair)\r\n        );\r\n      }\r\n    }\r\n\r\n    let newMap = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          if (\r\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\r\n              row + i,\r\n              col,\r\n            ])\r\n          )\r\n            return errorHandle(shipObjRefCurrent);\r\n          newMap.push([row + i, col]);\r\n        }\r\n\r\n        shipsCopy[shipName].orientation = \"vertical\";\r\n        break;\r\n\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          if (\r\n            multidimensionalIncludes(allNeighborsExceptCurrentShip, [\r\n              row,\r\n              col + i,\r\n            ])\r\n          )\r\n            return errorHandle(shipObjRefCurrent);\r\n          newMap.push([row, col + i]);\r\n        }\r\n\r\n        shipsCopy[shipName].orientation = \"horizontal\";\r\n        break;\r\n\r\n      default:\r\n        console.warn(\"wrong ship orientation in rmb\");\r\n    }\r\n\r\n    shipsCopy[shipName].map = newMap;\r\n\r\n    let newNeighbors = [];\r\n\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[shipName].neighbors = newNeighbors;\r\n\r\n    setShips(shipsCopy);\r\n  }\r\n\r\n  function handleDrop(e, dropRow, dropCol) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    const currentShipName = currentShipRef.current;\r\n    const shipObj = ships[currentShipName];\r\n    const shipsObjRefCurrent = shipObj.reference.current;\r\n\r\n    const grabX = grabXRef.current;\r\n    const grabY = grabYRef.current;\r\n\r\n    const placeX = dropCol * gridSize - grabX * gridSize + 8;\r\n    const placeY = dropRow * gridSize - grabY * gridSize + 8;\r\n\r\n    const placeCol = Math.floor(placeX / gridSize);\r\n    const placeRow = Math.floor(placeY / gridSize);\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"horizontal\":\r\n        if (placeCol > 10 - shipObj.size || placeCol < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      case \"vertical\":\r\n        if (placeRow > 10 - shipObj.size || placeRow < 0)\r\n          return errorHandle(shipsObjRefCurrent);\r\n        break;\r\n\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle misplace check\"\r\n        );\r\n    }\r\n\r\n    let shipsCopy = Object.assign({}, ships);\r\n\r\n    let newMap = [];\r\n    let newNeighbors = [];\r\n\r\n    switch (shipObj.orientation) {\r\n      case \"vertical\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow + i;\r\n          const col = placeCol;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      case \"horizontal\":\r\n        for (let i = 0; i < shipObj.size; i++) {\r\n          const row = placeRow;\r\n          const col = placeCol + i;\r\n          const newMapPair = [row, col];\r\n          for (const shipName in ships) {\r\n            if (shipName !== currentShipName) {\r\n              if (\r\n                multidimensionalIncludes(\r\n                  shipsCopy[shipName].neighbors,\r\n                  newMapPair\r\n                )\r\n              )\r\n                return errorHandle(shipsObjRefCurrent);\r\n            }\r\n          }\r\n          newMap.push(newMapPair);\r\n        }\r\n        break;\r\n      default:\r\n        return console.warn(\r\n          \"ship have wrong orientation in dropHandle, newMap loop\"\r\n        );\r\n    }\r\n    shipsCopy[currentShipName].map = newMap;\r\n\r\n    // calculate new neighbors\r\n    newMap.forEach((coords) => {\r\n      neighborsMoves.forEach((move) => {\r\n        const neighborsRow = coords[0] + move[0];\r\n        const neighborsCol = coords[1] + move[1];\r\n        const neighborsArray = [neighborsRow, neighborsCol];\r\n        if (\r\n          neighborsRow >= 0 &&\r\n          neighborsRow <= 9 &&\r\n          neighborsCol >= 0 &&\r\n          neighborsCol <= 9\r\n        )\r\n          if (\r\n            !multidimensionalIncludes(newNeighbors, neighborsArray) &&\r\n            !multidimensionalIncludes(newMap, neighborsArray)\r\n          )\r\n            newNeighbors.push(neighborsArray);\r\n      });\r\n    });\r\n    shipsCopy[currentShipName].neighbors = newNeighbors;\r\n\r\n    shipsCopy[currentShipName].position.x = placeX;\r\n    shipsCopy[currentShipName].position.y = placeY;\r\n\r\n    shipsCopy[currentShipName].isPlaced = true;\r\n    setShips(shipsCopy);\r\n\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"AllyGrid\"\r\n        style={{\r\n          display: \"grid\",\r\n          width: `${gridSize * 10}px`,\r\n          gridTemplateColumns: `repeat(10,${gridSize}px)`,\r\n          gridTemplateRows: `repeat(10,${gridSize}px)`,\r\n        }}\r\n      >\r\n        {generateGridDivs()}\r\n      </div>\r\n      {generateShipDivs()}\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}